@import url("https://use.typekit.net/ndh0ilz.css");
// Variables
// This is a generated file. Do not edit it directly.
$gds-color-white: #fff;
$gds-color-black: #1f2426;
$gds-color-purple-10: #ffc7f2;
$gds-color-purple-20: #f59de2;
$gds-color-purple-30: #e07ecb;
$gds-color-purple-40: #d160b7;
$gds-color-purple-50: #b34fa0;
$gds-color-purple-60: #964286;
$gds-color-purple-70: #773569;
$gds-color-purple-80: #5b284f;
$gds-color-purple-90: #401c36;
$gds-color-violet-10: #d8c7ff;
$gds-color-violet-20: #b69df5;
$gds-color-violet-30: #9379e0;
$gds-color-violet-40: #7b62cc;
$gds-color-violet-50: #634fb3;
$gds-color-violet-60: #534296;
$gds-color-violet-70: #44367b;
$gds-color-violet-80: #352a60;
$gds-color-violet-90: #271f47;
$gds-color-blue-10: #ade9ff;
$gds-color-blue-20: #61d5ff;
$gds-color-blue-30: #00b2f6;
$gds-color-blue-40: #0091d9;
$gds-color-blue-50: #0073b9;
$gds-color-blue-60: #005b98;
$gds-color-blue-70: #047;
$gds-color-blue-80: #003561;
$gds-color-blue-90: #002342;
$gds-color-aqua-10: #adffff;
$gds-color-aqua-20: #75f8fc;
$gds-color-aqua-30: #3bebf5;
$gds-color-aqua-40: #00d6e6;
$gds-color-aqua-50: #00b6c7;
$gds-color-aqua-60: #0097a8;
$gds-color-aqua-70: #007384;
$gds-color-aqua-80: #005362;
$gds-color-aqua-90: #003540;
$gds-color-teal-10: #adfff4;
$gds-color-teal-20: #67f5e2;
$gds-color-teal-30: #2de0c8;
$gds-color-teal-40: #1cc8b4;
$gds-color-teal-50: #16a597;
$gds-color-teal-60: #0e8e7e;
$gds-color-teal-70: #077565;
$gds-color-teal-80: #035a4b;
$gds-color-teal-90: #004033;
$gds-color-green-10: #adffbe;
$gds-color-green-20: #83f295;
$gds-color-green-30: #5ae072;
$gds-color-green-40: #48ce65;
$gds-color-green-50: #35bd59;
$gds-color-green-60: #24a344;
$gds-color-green-70: #1b8533;
$gds-color-green-80: #106621;
$gds-color-green-90: #094212;
$gds-color-lime-10: #e5ffa8;
$gds-color-lime-20: #cdf383;
$gds-color-lime-30: #b3e65c;
$gds-color-lime-40: #a0d64a;
$gds-color-lime-50: #8ec738;
$gds-color-lime-60: #73ab29;
$gds-color-lime-70: #588f1a;
$gds-color-lime-80: #3b6610;
$gds-color-lime-90: #234208;
$gds-color-yellow-10: #fff6a8;
$gds-color-yellow-20: #ffec82;
$gds-color-yellow-30: #ffe45e;
$gds-color-yellow-40: #ffda47;
$gds-color-yellow-50: #fcd214;
$gds-color-yellow-60: #e3b409;
$gds-color-yellow-70: #b88907;
$gds-color-yellow-80: #805203;
$gds-color-yellow-90: #4d2d02;
$gds-color-amber-10: #ffe6a8;
$gds-color-amber-20: #ffd784;
$gds-color-amber-30: #ffc95e;
$gds-color-amber-40: #fdba40;
$gds-color-amber-50: #faab19;
$gds-color-amber-60: #e3900b;
$gds-color-amber-70: #b86b07;
$gds-color-amber-80: #804103;
$gds-color-amber-90: #4d2502;
$gds-color-orange-10: #ffd3ad;
$gds-color-orange-20: #feb881;
$gds-color-orange-30: #fa9f5a;
$gds-color-orange-40: #f58331;
$gds-color-orange-50: #e66f20;
$gds-color-orange-60: #c95a14;
$gds-color-orange-70: #a6400d;
$gds-color-orange-80: #7d2c09;
$gds-color-orange-90: #571c03;
$gds-color-red-10: #ffc4b8;
$gds-color-red-20: #ff9c8c;
$gds-color-red-30: #fa7c69;
$gds-color-red-40: #f26552;
$gds-color-red-50: #e64b40;
$gds-color-red-60: #cc392f;
$gds-color-red-70: #a62b24;
$gds-color-red-80: #821d1a;
$gds-color-red-90: #520d0b;
$gds-color-gray-10: #f5f7f8;
$gds-color-gray-20: #e8eced;
$gds-color-gray-30: #d5d9db;
$gds-color-gray-40: #b6bec2;
$gds-color-gray-50: #8e999e;
$gds-color-gray-60: #69757a;
$gds-color-gray-70: #495257;
$gds-color-gray-80: #333a3d;
$gds-color-gray-90: #1f2426;
$gds-color-twitter: #1da1f2;
$gds-color-linked-in: #0077b5;
$gds-color-facebook: #3b5998;
$gds-color-pinterest: #bd081c;
$gds-color-youtube: #f00;
$gds-color-google-plus: #dd4b39;
$gds-color-cerulean: #00b2f6;
$gds-color-lochmara: #0073b9;
$gds-color-regal-blue: #047;
$gds-color-celery: #8ec738;
$gds-color-mustard: #ffe45e;
$gds-color-sea-buckthorn: #faab19;
$gds-color-flame-pea: #e64b40;
$gds-color-athens-gray: #f5f7f8;
$gds-color-mischka: #d5d9db;
$gds-color-manatee: #69757a;
$gds-color-bright-gray: #333a3d;
$gds-font-family: canada-type-gibson, Arial, sans-serif;
$gds-font-family-bold: canada-type-gibson, "Arial Black", Arial, sans-serif;
$gds-font-family-fallback: Arial, sans-serif;
$gds-font-family-bold-fallback: "Arial Black", Arial, sans-serif;
$gds-font-size-xs: 1rem;
$gds-font-size-s: 1.125rem;
$gds-font-size-m: 1.5rem;
$gds-font-size-l: 2.25rem;
$gds-font-size-xl: 3rem;
$gds-font-size-base: 1.125rem;
$gds-font-weight-normal: 400;
$gds-font-weight-semibold: 600;
$gds-font-weight-bold: 700;
$gds-line-height-xs: 1.5rem;
$gds-line-height-s: 1.5rem;
$gds-line-height-m: 1.875rem;
$gds-line-height-l: 2.25rem;
$gds-line-height-xl: 3rem;
$gds-line-height-base: 1.5rem;
$gds-media-query-palm-only: "only screen and (max-width: 37.4375em)";
$gds-media-query-lap-only: "only screen and (min-width: 37.5em) and (max-width: 56.1875em)";
$gds-media-query-lap-to-lap-wide: "only screen and (min-width: 37.5em) and (max-width: 74.9375em)";
$gds-media-query-lap-to-desk: "only screen and (min-width: 37.5em) and (max-width: 112.4375em)";
$gds-media-query-lap-and-up: "only screen and (min-width: 37.5em)";
$gds-media-query-lap-wide-only: "only screen and (min-width: 56.25em) and (max-width: 74.9375em)";
$gds-media-query-lap-wide-to-desk: "only screen and (min-width: 56.25em) and (max-width: 112.4375em)";
$gds-media-query-lap-wide-and-up: "only screen and (min-width: 56.25em)";
$gds-media-query-desk-only: "only screen and (min-width: 75em) and (max-width: 112.4375em)";
$gds-media-query-desk-and-up: "only screen and (min-width: 75em)";
$gds-media-query-wall-only: "only screen and (min-width: 112.5em)";
$gds-media-query-legacy-palm: "only screen and (max-width: 47.9375em)";
$gds-media-query-legacy-desk: "only screen and (min-width: 48em)";

$gds-site-width: 1200px;
$gds-vertical-rhythm: 0.75rem;
$gds-line-length-limit: 40em;
$gds-gutter-palm: $gds-vertical-rhythm * 1.5;

// Design Token Candidates

// General Color
$gds-color-error: $gds-color-red-50;
$gds-color-success: $gds-color-lime-50;

// Text Color
$gds-color-text-default: $gds-color-gray-90;
$gds-color-text-mode-dark: $gds-color-white;
$gds-color-text-link: $gds-color-blue-50;
$gds-color-text-heading: $gds-color-text-default;
$gds-color-text-control: $gds-color-text-default;
$gds-color-text-control-disabled: $gds-color-gray-60;
$gds-color-text-error: $gds-color-error;

// Background Color
$gds-color-background-default: $gds-color-gray-10;
$gds-color-background-control: $gds-color-white;
$gds-color-background-control-disabled: $gds-color-gray-30;

// Border Color
$gds-color-border-control: $gds-color-gray-60;
$gds-color-border-error: $gds-color-error;
$gds-color-border-success: $gds-color-success;

// Border Width
$gds-border-width-thin: 1px;
$gds-border-width-thick: 2px;
$gds-border-width-xl: 4px;
$gds-border-width-control: $gds-border-width-thick;


// Utilities
/*
* Scut, a collection of Sass utilities
* to ease and improve our implementations of common style-code patterns.
* v1.4.0
* Docs at http://davidtheclark.github.io/scut
*/

@mixin scut-clearfix {

  &:after {
    content: "";
    display: table;
    clear: both;
  }

}

%scut-clearfix {
  @include scut-clearfix;
}
@mixin scut-list-unstyled(
  $no-margin: true
) {

  list-style-type: none;
  padding-left: 0;

  @if $no-margin {
    margin-top: 0;
    margin-bottom: 0;
  }

}

%scut-list-unstyled {
  @include scut-list-unstyled();
}
// Depends on `list-unstyled` and `clearfix`.

@mixin scut-list-floated (
  $space: false,
  $dir: left,
  $no-margin: true
) {

  @include scut-list-unstyled($no-margin);
  @include scut-clearfix;

  & > li {
    float: $dir;
  }

  @if $space {
    & > li + li {
      margin-#{$dir}: $space;
    }
  }

}

%scut-list-floated {
  @include scut-list-floated;
}

@function scut-autoOrValue ($val) {
  @if $val == a or $val == auto {
    @return auto;
  }
  @else {
    @return $val;
  }
}

@mixin scut-coords (
  $coordinates: n n n n
) {

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  @if $top != n {
    top: scut-autoOrValue($top);
  }
  @if $right != n {
    right: scut-autoOrValue($right);
  }
  @if $bottom != n {
    bottom: scut-autoOrValue($bottom);
  }
  @if $left != n {
    left: scut-autoOrValue($left);
  }

}
@function scut-strip-unit (
  $num
) {

  @return $num / ($num * 0 + 1);

}
// Depends on `scut-strip-unit`.

$scut-em-base: 16 !default;

@function scut-em (
  $pixels,
  $base: $scut-em-base
) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, 16, 1);
  $divisor: scut-strip-unit($base) * $multiplier;

  $em-vals: ();
  @each $val in $pixels {
    $val-in-ems: (scut-strip-unit($val) / $divisor) * 1em;
    $em-vals: append($em-vals, $val-in-ems);
  }

  @if length($em-vals) == 1 {
    // return a single value instead of a list,
    // so it can be used in calculations
    @return nth($em-vals, 1);
  }
  @else {
    @return $em-vals;
  }

}
// Depends on `scut-strip-unit`.

$scut-rem-base: 16 !default;

@function scut-rem (
  $pixels
) {

  $rem-vals: ();
  @each $val in $pixels {
    $val-in-rems: scut-strip-unit($val) / $scut-rem-base * 1rem;
    $rem-vals: append($rem-vals, $val-in-rems);
  }

  @if length($rem-vals) == 1 {
    // return a single value instead of a list,
    // so it can be used in calculations
    @return nth($rem-vals, 1);
  }
  @else {
    @return $rem-vals;
  }

}
@mixin scut-border (
  $style,
  $sides: n y
) {

  @if length($sides) == 2 {
    @if nth($sides, 1) != n {
      border-top: $style;
      border-bottom: $style;
    }
    @if nth($sides, 2) != n {
      border-left: $style;
      border-right: $style;
    }
  }

  @else if length($sides) == 4 {
    @if nth($sides, 1) != n {
      border-top: $style;
    }
    @if nth($sides, 2) != n {
      border-right: $style;
    }
    @if nth($sides, 3) != n {
      border-bottom: $style;
    }
    @if nth($sides, 4) != n {
      border-left: $style;
    }
  }

  @else {
    @warn "Scut-border requires a $sides argument of 2 or 4 values."
  }

}
@mixin scut-circle (
  $size,
  $color: inherit
) {

  border-radius: 50%;
  display: inline-block;

  @if $color == inherit {
    // If user wants to inherit the color,
    // take advantage of the fact that border
    // color defaults to the text color of the element.
    border-width: $size / 2;
    border-style: solid;
    height: 0;
    width: 0;
  }
  @else {
    // Otherwise, just use background-color.
    background-color: $color;
    height: $size;
    width: $size;
  }

}
@mixin scut-color-swap (
  $off,
  $on,
  $duration: 0,
  $bg: false
) {

  $transition-properties: null;
  $off-is-list: type-of($off) == list;
  $on-is-list: type-of($on) == list;

  // If $off IS a list,
  // assign color and background-color.
  @if $off-is-list {
    color: nth($off, 1);
    background-color: nth($off, 2);
    $transition-properties: background-color, color;
  }

  // If $off IS NOT a list and $bg is TRUE,
  // assign background-color.
  @else if $bg and not($off-is-list) {
    background-color: $off;
    $transition-properties: background-color;
  }

  // If $off IS NOT a list and $bg is FALSE,
  // assign color.
  @else {
    color: $off;
    $transition-properties: color;
  }

  // Only set-up transition if $duration != 0.
  @if $duration != 0 {
    transition-property: $transition-properties;
    transition-duration: $duration;
  }

  &:hover,
  &:focus {

    // $on is treated the same as $off, above.
    @if $on-is-list {
      color: nth($on, 1);
      background-color: nth($on, 2);
    }

    @else if $bg and not($on-is-list) {
      background-color: $on;
    }

    @else {
      color: $on;
    }
  }

}
@mixin scut-hd-bp (
  $ratio: 1.3
) {

  @media (-o-min-device-pixel-ratio: ($ratio / 1)),
         (-webkit-min-device-pixel-ratio: $ratio),
         (min-resolution: (round(96 * $ratio) * 1dpi)) {
    @content;
  }

}

@mixin scut-hide-visually {

  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

}

%scut-hide-visually {
  @include scut-hide-visually;
}
@mixin scut-image-replace {

  text-indent: 102%;
  white-space: nowrap;
  overflow: hidden;
  padding: 0;

}

%scut-image-replace {
  @include scut-image-replace;
}

// Depends on scut-rem and scut-strip-unit

@mixin scut-rem-fallback (
  $pixels,
  $property: font-size
) {

  $px-vals: null;
  @each $val in $pixels {
    $val-in-px: scut-strip-unit($val) * 1px;
    $px-vals: append($px-vals, $val-in-px);
  }
  $rem-vals: scut-rem($pixels);

  #{$property}: $px-vals;
  #{$property}: $rem-vals;

}
@mixin scut-reset-border-box {
  // Make everything a border-box, because why not?
  html {
    box-sizing: border-box;
  }
  *, *:before, *:after {
    box-sizing: inherit;
  }
}

@mixin scut-reset-antialias {
  // Antialias!
  body {
    -webkit-font-smoothing: antialiased;
  }
  *, *:before, *:after {
    -webkit-font-smoothing: inherit;
  }
}

@mixin scut-reset-semanticize {
  // Make headers and <b> semantic, not presentational.
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: 1em;
    font-weight: normal;
    margin: 0;
  }
  b {
    font-weight: normal;
  }
}

@mixin scut-reset-pointer {
  // Clickable form elements should have a pointer.
  label,
  select,
  option,
  button {
    cursor: pointer;
  }
}

@mixin scut-reset-form {
  fieldset {
    border: 0;
    margin: 0;
    padding: 0;
  }
  textarea {
    resize: vertical;
  }
}

@mixin scut-reset-button {
  // Reset default button styles, which are never used.
  button,
  [type="button"],
  [type="submit"],
  [type="reset"] {
    background: transparent;
    border: 0;
    color: inherit;
    font: inherit;
    margin: 0;
    padding: 0;
    width: auto;
    -webkit-appearance: none;
    -webkit-font-smoothing: antialiased;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    &::-moz-focus-inner {
      padding: 0;
      border: 0;
    }
  }
}

@mixin scut-reset-paragraph {
  // Some paragraph margins just get in the way.
  p:first-of-type {
    margin-top: 0;
  }
  p:last-of-type {
    margin-bottom: 0;
  }
}

@mixin scut-reset-media {
  // You want these elements fluid, probably.
  img,
  video {
    max-width: 100%;
    height: auto;
  }
}

@mixin scut-reset-figure {
  // Remove default margins.
  figure {
    margin: 0;
  }
}

// Call them all, minus exclusions!
@mixin scut-reset ($exclude: false) {
  @if not(index($exclude, border-box)) {
    @include scut-reset-border-box;
  }
  @if not(index($exclude, antialias)) {
    @include scut-reset-antialias;
  }
  @if not(index($exclude, semanticize)) {
    @include scut-reset-semanticize;
  }
  @if not(index($exclude, pointer)) {
    @include scut-reset-pointer;
  }
  @if not(index($exclude, form)) {
    @include scut-reset-form;
  }
  @if not(index($exclude, button)) {
    @include scut-reset-button;
  }
  @if not(index($exclude, paragraph)) {
    @include scut-reset-paragraph;
  }
  @if not(index($exclude, media)) {
    @include scut-reset-media;
  }
  @if not(index($exclude, figure)) {
    @include scut-reset-figure;
  }
}

@mixin scut-selected (
  $active: false
) {

  @if $active {
    &:hover,
    &:focus,
    &:active {
      @content;
    }
  }
  @else {
    &:hover,
    &:focus {
      @content;
    }
  }

}
@mixin scut-triangle (
  $direction: right,
  $size: 0.75em,
  $color: inherit
) {

  display: inline-block;
  height: 0;
  width: 0;
  // For improved appearance in some Webkit browsers
  -webkit-transform: rotate(360deg);

  // Set up some variables
  $width: null;
  $height: null;
  $border-widths: null;

  @if type-of($size) == list {
    $width: nth($size, 1);
    $height: nth($size, 2);
  }
  @else {
    $width: $size;
    $height: $size;
  }

  @if ($direction == up) or ($direction == down) {
    // For up and down, width gets two borders but height only one,
    // so divide second border-width value by 2
    $border-widths: $height ($width / 2);
  }
  @else if ($direction == right) or ($direction == left) {
    // For right and left, height gets two borders but width only one,
    // so divide first border-width value by 2
    $border-widths: ($height / 2) $width;
  }
  @else {
    // For right triangles (the rest), both sides get two borders,
    // so divide both by 2
    $border-widths: ($height / 2) ($width / 2);
  }

  border-width: $border-widths;
  border-style: solid;


  // STANDARD TRIANGLES

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    @if $direction == up {
      border-bottom-color: $color;
      border-top-width: 0;
    }
    @else if $direction == right {
      border-left-color: $color;
      border-right-width: 0;
    }
    @else if $direction == down {
      border-top-color: $color;
      border-bottom-width: 0;
    }
    @else if $direction == left {
      border-right-color: $color;
      border-left-width: 0;
    }
  }


  // CORNER TRIANGLES

  @else if ($direction == top-right) or ($direction == top-left) {
    border-top-color: $color;
    border-bottom-color: transparent;
    @if $direction == top-right {
      border-left-color: transparent;
      border-right-color: $color;
    }
    @else if $direction == top-left {
      border-left-color: $color;
      border-right-color: transparent;
    }
  }

  @else if ($direction == bottom-right) or ($direction == bottom-left) {
    border-top-color: transparent;
    border-bottom-color: $color;
    @if $direction == bottom-right {
      border-left-color: transparent;
      border-right-color: $color;
    }
    @else if $direction == bottom-left {
      border-left-color: $color;
      border-right-color: transparent;
    }
  }

}

%scut-triangle {
  @include scut-triangle;
}
@mixin scut-center-absolutely (
  $dimensions
) {

  $width: nth($dimensions, 1);
  $height: nth($dimensions, 2);

  position: absolute;

  @if $width != n {
    width: $width;
    left: 50%;
    margin-left: (-$width / 2);
  }

  @if $height != n {
    height: $height;
    top: 50%;
    margin-top: (-$height / 2);
  }

}
@mixin scut-center-block (
  $max-width: false
) {

  margin-left: auto;
  margin-right: auto;
  @if $max-width {
    max-width: $max-width;
  }

}

%scut-center-block {
  @include scut-center-block;
}

@mixin scut-center-transform (
  $axis: false // or x or y
) {

  position: absolute;

  @if $axis != x {
    top: 50%;
    margin-top: auto;
    margin-bottom: auto;
  }

  @if $axis != y {
    left: 50%;
    margin-left: auto;
    margin-right: auto;
  }

  $translate-val: null;

  @if not($axis) {
    $translate-val: translate(-50%, -50%);
  }
  @else if $axis != x {
    $translate-val: translateY(-50%);
  }
  @else if $axis != y {
    $translate-val: translateX(-50%);
  }

  -webkit-transform: $translate-val;
  -ms-transform: $translate-val;
  transform: $translate-val;
}

%scut-center-transform {
  @include scut-center-transform;
}

%scut-center-transform-x {
  @include scut-center-transform(x);
}

%scut-center-transform-y {
  @include scut-center-transform(y);
}

@mixin scut-fill (
  $width-height: false
) {

  position: absolute;
  left: 0;
  top: 0;
  @if $width-height {
    width: 100%;
    height: 100%;
  }
  @else {
    right: 0;
    bottom: 0;
  }

}

%scut-fill {
  @include scut-fill;
}
@mixin scut-list-custom (
  $content: "\2022",
  $marker-width: 0.75em,
  $pad: 0,
  $no-margin: false
) {

  $content-val: null;
  $counter: index($content, count);
  @if $counter {
    @if length($content) == 3 {
      $content-val: counter(scutlistcounter, nth($content, 3))nth($content,2);
    }
    @else if length($content) == 2 {
      $content-val: counter(scutlistcounter)nth($content,2);
    }
    @else {
      $content-val: counter(scutlistcounter);
    }
  }
  @else {
    $content-val: $content;
  }

  padding-left: $marker-width + $pad;
  list-style-type: none;

  @if $no-margin {
    margin-top: 0;
    margin-bottom: 0;
  }

  & > li {
    position: relative;
    @if $counter {
      counter-increment: scutlistcounter;
    }
    &:before {
      content: $content-val;
      display: block;
      position: absolute;
      top: 0;
      left: -$marker-width;
      width: $marker-width;
      @content;
    }
  }

}
// Depends on `list-floated`, which depends in turn on `list-unstyled` and `clearfix`.

@mixin scut-list-divided (
  $divider: "|",
  $space: 0.5em,
  $dir: left,
  $height: false,
  $no-margin: true
) {

  @include scut-list-floated($dir: $dir, $no-margin: $no-margin);

  $pseudo: if($dir == left, 'before', 'after');

  // If an explicit height is passed,
  // things are different: All <li>s
  // need the pseudo-element (to force height),
  // but the first's must be hidden.

  @if $height {
    & > li {
      height: $height;
    }
    & > li:#{$pseudo} {
      height: $height;
      content: $divider;
      display: inline-block;
      vertical-align: middle;
      @content;
    }
    & > li:first-child:#{$pseudo} {
      width: 0;
      overflow: hidden;
    }
  }

  & > li + li:#{$pseudo} {
    @if not($height) {
      content: $divider;
      display: inline-block;
      @content;
    }
    margin-left: $space;
    margin-right: $space;
  }

}

%scut-list-bar {
  @include scut-list-divided;
}

%scut-list-breadcrumb {
  @include scut-list-divided("/");
}
// Depends on `list-unstyled`.

@mixin scut-list-inline (
  $space: false,
  $no-margin: true
) {

  @include scut-list-unstyled($no-margin);

  & > li {
    display: inline-block;
  }

  @if $space {
    & > li + li {
      margin-left: $space;
    }
  }

}

%scut-list-inline {
  @include scut-list-inline;
}
// Depends on `list-unstyled`.

@mixin scut-list-punctuated (
  $divider: ", ",
  $display: inline,
  $no-margin: true
) {

  @include scut-list-unstyled($no-margin);

  & > li {
    display: $display;
    &:not(:last-child):after {
      content: $divider;
    }
  }

}

%scut-list-comma {
  @include scut-list-punctuated;
}
@mixin scut-margin (
  $margin
) {

  @if length($margin) == 1 and $margin != n {
    margin-top: $margin;
    margin-right: $margin;
    margin-bottom: $margin;
    margin-left: $margin;
  }

  @if length($margin) == 2 {
    $margin-y: nth($margin, 1);
    $margin-x: nth($margin, 2);
    @if $margin-y != n {
      margin-top: $margin-y;
      margin-bottom: $margin-y;
    }
    @if $margin-x != n {
      margin-left: $margin-x;
      margin-right: $margin-x;
    }
  }

  @if length($margin) == 3 {
    $margin-y-top: nth($margin, 1);
    $margin-x: nth($margin, 2);
    $margin-y-bottom: nth($margin, 3);
    @if $margin-y-top != n {
      margin-top: $margin-y-top;
    }
    @if $margin-x != n {
      margin-right: $margin-x;
      margin-left: $margin-x;
    }
    @if $margin-y-bottom != n {
      margin-bottom: $margin-y-bottom;
    }
  }

  @if length($margin) == 4 {
    $margin-top: nth($margin, 1);
    $margin-right: nth($margin, 2);
    $margin-bottom: nth($margin, 3);
    $margin-left: nth($margin, 4);
    @if $margin-top != n {
      margin-top: $margin-top;
    }
    @if $margin-right != n {
      margin-right: $margin-right;
    }
    @if $margin-bottom != n {
      margin-bottom: $margin-bottom;
    }
    @if $margin-left != n {
      margin-left: $margin-left;
    }
  }

}
@mixin scut-padding (
  $padding
) {

  @if length($padding) == 1 and $padding != n {
    padding-top: $padding;
    padding-right: $padding;
    padding-bottom: $padding;
    padding-left: $padding;
  }

  @if length($padding) == 2 {
    $padding-y: nth($padding, 1);
    $padding-x: nth($padding, 2);
    @if $padding-y != n {
      padding-top: $padding-y;
      padding-bottom: $padding-y;
    }
    @if $padding-x != n {
      padding-left: $padding-x;
      padding-right: $padding-x;
    }
  }

  @if length($padding) == 3 {
    $padding-y-top: nth($padding, 1);
    $padding-x: nth($padding, 2);
    $padding-y-bottom: nth($padding, 3);
    @if $padding-y-top != n {
      padding-top: $padding-y-top;
    }
    @if $padding-x != n {
      padding-right: $padding-x;
      padding-left: $padding-x;
    }
    @if $padding-y-bottom != n {
      padding-bottom: $padding-y-bottom;
    }
  }

  @if length($padding) == 4 {
    $padding-top: nth($padding, 1);
    $padding-right: nth($padding, 2);
    $padding-bottom: nth($padding, 3);
    $padding-left: nth($padding, 4);
    @if $padding-top != n {
      padding-top: $padding-top;
    }
    @if $padding-right != n {
      padding-right: $padding-right;
    }
    @if $padding-bottom != n {
      padding-bottom: $padding-bottom;
    }
    @if $padding-left != n {
      padding-left: $padding-left;
    }
  }
}
// Depends on `positioning-coordinates`.

@mixin scut-absolute (
  $coordinates: 0 n n 0
) {

  position: absolute;
  @include scut-coords($coordinates);

}

%scut-absolute {
  @include scut-absolute;
}
// Depends on `positioning-coordinates`.

@mixin scut-fixed (
  $coordinates: 0 n n 0
) {

  position: fixed;
  @include scut-coords($coordinates);

}

%scut-fixed {
  @include scut-fixed;
}
// Depends on `positioning-coordinates`.

@mixin scut-relative (
  $coordinates: n n n n
) {

  position: relative;
  @include scut-coords($coordinates);

}
@mixin scut-ratio-box (
  $ratio: 1/1
) {

  overflow: hidden;
  position: relative;

  // The container's height, as a percentage of the
  // container's width, is set by assigning
  // padding-top to a pseudo-element.
  &:before {
    content: "";
    display: block;
    height: 0;
    padding-top: (1 / $ratio) * 100%;
  }

}

%scut-ratio-box {
  @include scut-ratio-box;
}
@mixin scut-size(
  $size
) {

  @if length($size) == 1 {
    width:  $size;
    height: $size;
  }
  @else if length($size) == 2 {
    width:  nth($size, 1);
    height: nth($size, 2);
  }

}
@mixin scut-sticky-footer-fixed (
  $height,
  $wrapper: ".wrapper",
  $footer: ".scut-sticky"
) {

  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  #{$wrapper} {
    min-height: 100%;
    margin-bottom: -$height;
    &:after {
      content: "";
      display: block;
    }
  }

  #{$wrapper}:after,
  #{$footer} {
    height: $height;
  }

}

// deprecated
@mixin scut-sticky-footer (
  $height,
  $wrapper: ".wrapper",
  $footer: ".scut-sticky"
){
  @include scut-sticky-footer-fixed($height, $wrapper, $footer);
}
@mixin scut-sticky-footer-fluid (
  $wrapper: ".wrapper",
  $footer: ".scut-sticky"
) {

  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  #{$wrapper} {
    display: table;
    height: 100%;
    width: 100%;
  }

  #{$footer} {
    display: table-row;
    height: 1px;
  }

}
@mixin scut-vcenter-ib (
  $inner...
) {

  // The inner element is vertically centered
  // by middle-aligning it with an inline pseudo-element
  // whose height is 100%.

  &:before {
    content: "";
    height: 100%;
    display: inline-block;
    vertical-align: middle;
    // A small negative right margin is set
    // to account for the default
    // word-spacing of inline-block.
    margin-right: -0.25em;
  }

  $inner: if(length($inner) == 0, ".scut-inner", $inner);
  @each $cell-selector in $inner {
    $cell-selector: unquote($cell-selector);
    & > #{$cell-selector} {
      display: inline-block;
      vertical-align: middle;
    }
  }

}

%scut-vcenter-ib {
  @include scut-vcenter-ib;
}

@mixin scut-vcenter-lh (
  $height
) {

  height: $height;
  line-height: $height;

}
@mixin scut-vcenter-td (
  $inner...
) {

  display: table;

  $inner: if(length($inner) == 0, ".scut-inner", $inner);
  @each $cell-selector in $inner {
    $cell-selector: unquote($cell-selector);
    & > #{$cell-selector} {
      display: table-cell;
      vertical-align: middle;
    }
  }

}


%scut-vcenter-td {
  @include scut-vcenter-td;
}

// Depends on scut-center-transform

@mixin scut-vcenter-tt () {
  @include scut-center-transform(y);
}

%scut-vcenter-tt {
  @include scut-vcenter-tt;
}
// space
$scut-space: "\0020";
// non-breaking space
$scut-nbsp: "\00a0";

// quotation mark
$scut-quot: "\0022";
// left single curly quote
$scut-lsquo: "\2018";
// right single curly quote
$scut-rsquo: "\2019";
// left double curly quote
$scut-ldquo: "\201C";
// right double curly quote
$scut-rdquo: "\201D";
// left single angle quote (guillemet)
$scut-lsaquo: "\2039";
// right single angle quote (guillemet)
$scut-rsaquo: "\203A";
// left double angle quote (guillemet)
$scut-laquo: "\00ab";
// right double angle quote (guillemet)
$scut-raquo: "\00bb";

// em dash (mutton)
$scut-mdash: "\2014";
// en dash (nut)
$scut-ndash: "\2013";
// hyphen
$scut-hyphen: "\2010";

// ampersand
$scut-amp: "\0026";
// greater than
$scut-gt: "\003e";
// less than
$scut-lt: "\003c";
// times
$scut-times: "\00D7";
// big times
$scut-bigtimes: "\2715";
// checkmark
$scut-checkmark: "\2713";

// section sign (double S, hurricane, sectional symbol, the legal doughnut, signum sectionis)
$scut-sect: "\00a7";
// paragraph symbol (pilcrow)
$scut-para: "\00b6";

// middot (interpunct, interpoint)
$scut-middot: "\00b7";
// o-slash (slashed o)
$scut-oslash: "\00f8";
// bullet
$scut-bull: "\2022";
// white bullet
$scut-whibull: "\25E6";
// horizontal ellipsis
$scut-hellip: "\2026";
// vertical ellipsis
$scut-vellip: "\22EE";
// midline horizontal ellipsis
$scut-midhellip: "\22EF";

// up-pointing triangle
$scut-utri: "\25b2";
// down-pointing triangle
$scut-dtri: "\25bc";
// left-pointing triangle
$scut-ltri: "\25c0";
// right-pointing triangle
$scut-rtri: "\25b6";
// up-pointing small triangle
$scut-ustri: "\25b4";
// down-pointing small triangle
$scut-dstri: "\25be";
// left-pointing small triangle
$scut-lstri: "\25c2";
// right-pointing small triangle
$scut-rstri: "\25b8";
// diamond
$scut-diamond: "\25c6";
// fisheye
$scut-fisheye: "\25c9";
// bullseye
$scut-bullseye: "\25ce";
// circle
$scut-circle: "\25cf";
// white circle
$scut-whitecircle: "\25cb";
// square
$scut-square: "\25a0";
// white square
$scut-whitesquare: "\25a1";
// small square
$scut-ssquare: "\25aa";
// small white square
$scut-swhitesquare: "\25ab";

// general currency
$scut-currency: "\00a4";
// cent
$scut-cent: "\00a2";
// dollar
$scut-dollar: "\0024";
// pound
$scut-pound: "\00a3";
// euro
$scut-euro: "\20ac";
// yen
$scut-yen: "\00a5";
// rupee
$scut-rupee: "\20B9";
@function main-src($formats, $file-path, $font-family) {
  // Return the list of `src` values, in order, that
  // a good `@font-face` will need, including only
  // those formats specified in the list `$formats`.
  $result: ();
  @if index($formats, eot) {
    $eot-val: url('#{$file-path}.eot?#iefix') format('embedded-opentype');
    $result: append($result, $eot-val, comma);
  }
  @if index($formats, woff2) {
    $woff2-val: url('#{$file-path}.woff2') format('woff2');
    $result: append($result, $woff2-val, comma);
  }
  @if index($formats, woff) {
    $woff-val: url('#{$file-path}.woff') format('woff');
    $result: append($result, $woff-val, comma);
  }
  @if index($formats, ttf) {
    $ttf-val: url('#{$file-path}.ttf') format('truetype');
    $result: append($result, $ttf-val, comma);
  }
  @if index($formats, svg) {
    $svg-val: url('#{$file-path}.svg##{$font-family}') format('svg');
    $result: append($result, $svg-val, comma);
  }
  @return $result;
}

@mixin scut-font-face (
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $formats: eot woff2 woff ttf svg
) {

  @if index('italic' 'oblique', $weight) {
    $style: $weight;
    $weight: normal;
  }

  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    @if index($formats, eot) {
      src: url('#{$file-path}.eot');
    }
    src: main-src($formats, $file-path, $font-family);
  }

}

@mixin scut-hanging-indent (
  $indent: 1em
) {

  // padding-left creates the indent,
  // while text-indent pulls the first line
  // back to the edge.

  padding-left: $indent;
  text-indent: -$indent;

}

%scut-hanging-indent {
  @include scut-hanging-indent;
}
@mixin scut-indented-ps (
  $indent: 1.5em,
  $no-first-indent: true
) {

  p {
    margin: 0;
    text-indent: $indent;
  }

  @if $no-first-indent {
    p:first-of-type {
      text-indent: 0;
    }
  }

}

%scut-indented-ps {
  @include scut-indented-ps;
}
@mixin scut-key-val (
  $divider: ":",
  $pad: 0.25em,
  $indent: 1em,
  $spacing: 0,
  $pad-left: 0
) {

  & > dt {
    clear: both;
    float: left;
    &:after {
      content: $divider;
      margin-right: $pad;
      @if $pad-left != 0 {
        margin-left: $pad-left;
      }
    }
  }

  & > dd {
    margin-left: $indent;
    @if $spacing != 0 {
      margin-bottom: $spacing;
    }
  }

}

%scut-key-val {
  @include scut-key-val;
}
@mixin scut-link-bb (
  $color: inherit,
  $style: solid,
  $width: 1px
) {

  text-decoration: none;

  border-bottom-width: $width;
  border-bottom-style: $style;
  @if $color != inherit {
    border-bottom-color: $color;
  }

}

%scut-link-bb {
  @include scut-link-bb;
}
// SCUT LINK UNSTYLED
// http://davidtheclark.github.io/scut/#link-unstyled

@mixin scut-link-unstyled() {

  text-decoration: none;
  color: inherit;

}

%scut-link-unstyled {
  @include scut-link-unstyled();
}

@mixin scut-reverse-italics (
  $elements: null
) {

  $element-list: em, cite, i;
  font-style: italic;
  #{join($element-list, $elements)} {
    font-style: normal;
  }

}

%scut-reverse-italics {
  @include scut-reverse-italics;
}

@mixin scut-side-lined (
  $height: 1px,
  $space: 0.5em,
  $color: inherit,
  $style: solid,
  $v-adjust: false,
  $double: false
) {

  display: block;
  overflow: hidden;
  text-align: center;

  &:before,
  &:after {
    content: "";
    display: inline-block;
    vertical-align: middle;
    position: relative;
    width: 50%;

    border-top-style: $style;
    border-top-width: $height;

    @if $color != inherit {
      border-top-color: $color;
    }

    @if $v-adjust != false {
      bottom: $v-adjust;
    }

    @if $double != false {
      height: $double;
      border-bottom-style: $style;
      border-bottom-width: $height;
      @if $color != inherit {
        border-bottom-color: $color;
      }
    }
  }

  &:before {
    right: $space;
    margin-left: -50%;
  }
  &:after {
    left: $space;
    margin-right: -50%;
  }

}

%scut-side-lined {
  @include scut-side-lined;
}
@mixin scut-truncate {

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

}

%scut-truncate {
  @include scut-truncate;
}
// https://gist.github.com/jlong/f06f5843104ee10006fe

@function sqrt ($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }

  @return $x1;
}

// Brightness math based on:
//   http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return 100% * $number / 255;
}

@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}

////
/// Sass utilities for the Gazelle Design System
/// @author Jeremy McDuffie
////

/// Creates a button style with the given background color. By default, the text color will be
/// chosen automatically based on the brightness of the background. Note: The hover background color
/// is currently optional for backwards-compatibility but consider that usage to be deprecated and
/// update all of your code to pass in both colors.
/// @param {color} $background-color - The color of the button
/// @param {color} $color [false] - The color of the text
/// @param {color} $hover-background-color [false] - The color of the button on hover/focus
/// @example scss
///   @include gds-button-style(blue);
///   @include gds-button-style(chartreuse, red);
@mixin gds-button-style($background-color, $color: false, $hover-background-color: false) {
  background-color: $background-color;

  @if $color {
    color: $color;
  } @elseif brightness($background-color) < 65% {
    color: $gds-color-white;
  } @else {
    color: $gds-color-text-default;
  }

  &:hover,
  &:focus {
    @if $hover-background-color {
      background-color: $hover-background-color;
    } @else {
      // This is a false positive
      // scss-lint:disable VariableForProperty
      background-color: darken($background-color, 8%);
      // scss-lint:enable VariableForProperty
    }
  }
}

/// Creates a ghost button style with the given color. Ghost buttons have a colored
/// border matching the text color and a transparent background. Note: The hover color is currently
/// optional for backwards-compatibility but consider that usage to be deprecated and update all of
/// your code to pass in both colors.
/// @param {color} $color - The color of the button
/// @param {color} $hover-color [false] - The color of the button on hover/focus
/// @example scss
///   @include gds-ghost-button-style(green);
@mixin gds-ghost-button-style($color, $hover-color: false) {
  border-color: currentColor;
  background-color: transparent;
  color: $color;

  &:hover,
  &:focus {
    background-color: transparent;

    @if $hover-color {
      color: $hover-color;
    } @else {
      // This is a false positive
      // scss-lint:disable VariableForProperty
      color: darken($color, 8%);
      // scss-lint:enable VariableForProperty
    }
  }
}

/// Converts one or more numbers of rhythms into `rem`s. `0` is left alone along with any
/// non-numeric values, such as `n`.
/// @group rhythm
/// @param {list | number} $multipliers [1] - The number of rhythms, or a list of such numbers
/// @return {list | number} The transformed number (in `rem`s) or a list of such numbers
/// @example scss
///   gds-rhythm() // 1.5rem
///   gds-rhythm(4) // 6rem
///   gds-rhythm(1 n 2 0) // 1.5rem n 3rem 0
@function gds-rhythm($multipliers: 1) {
  $result: ();

  @each $multiplier in $multipliers {
    @if type-of($multiplier) == number and $multiplier != 0 {
      $result: append($result, $gds-vertical-rhythm * $multiplier);
    } @else {
      $result: append($result, $multiplier);
    }
  }

  @return $result;
}

/// Sets the `margin` properties in `rem`s based on a list of values in rhythms. The value `n` can
/// be used to prevent setting a `margin` for that side. Non-numbers are ignored (e.g. `auto`).
/// @group rhythm
/// @param {list} $values - 1-4 `margin` values in rhythms
/// @example scss
///   @include gds-rhythm-margin(1);
///   // margin: 1.5rem;
///   @include gds-rhythm-margin(0 auto 4);
///   // margin: 0 auto 6rem;
///   @include gds-rhythm-margin(1 n 2);
///   // margin-top: 1.5rem;
///   // margin-bottom: 3rem;
@mixin gds-rhythm-margin($values) {
  @include scut-margin(gds-rhythm($values));
}

/// Sets the `padding` properties in `rem`s based on a list of values in rhythms. The value `n` can
/// be used to prevent setting a `padding` for that side.
/// @group rhythm
/// @param {list} $values - 1-4 `padding` values in rhythms
/// @example scss
///   @include gds-rhythm-padding(1);
///   // padding: 1.5rem;
///   @include gds-rhythm-padding(1 n 2);
///   // padding-top: 1.5rem;
///   // padding-bottom: 3rem;
@mixin gds-rhythm-padding($values) {
  @include scut-padding(gds-rhythm($values));
}

/// Sets the `width` and `height` properties in `rem`s based on a list of values in rhythms.
/// @group rhythm
/// @param {list} $values - Either a single value to use for both `width` and `height` or a `width` value followed by a `height` value
/// @example scss
///   @include gds-rhythm-size(2);
///   // width: 3rem;
///   // height: 3rem;
///   @include gds-rhythm-size(1 3);
///   // width: 1.5rem;
///   // height: 4.5rem;
@mixin gds-rhythm-size($values) {
  @include scut-size(gds-rhythm($values));
}

/// Converts a type scale identifier into the appropriate `font-size` value in `rem`s, either for
/// every breakpoint or just a specific one.
/// @deprecated This function has been deprecated in favor of using the tokens directly
/// @group typography
/// @param {string} $level - The name of the value from the type scale (e.g. `alpha`)
/// @param {string} $breakpoint [false] - A specific breakpoint name
/// @return {map | number} Either a map of `rem` values or a specific value for the given breakpoint
/// @example scss
///   gds-font-size(beta) // (palm: 1.5rem, desk: 2.25rem)
///   gds-font-size(delta, palm) // 1.125rem
@function gds-font-size($level, $breakpoint: false) {
  $gds-font-sizes: (
    beta:    (palm: $gds-font-size-l,    desk: $gds-font-size-xl),
    gamma:   (palm: $gds-font-size-m,    desk: $gds-font-size-l),
    delta:   (palm: $gds-font-size-s,    desk: $gds-font-size-m),
    base:    (palm: $gds-font-size-base, desk: $gds-font-size-base),
    milli:   (palm: $gds-font-size-xs,   desk: $gds-font-size-xs)
  );

  $font-sizes: map-get($gds-font-sizes, $level);

  @if $breakpoint and map-has-key($font-sizes, $breakpoint) {
    @return map-get($font-sizes, $breakpoint);
  } @else {
    @return $font-sizes;
  }
}

/// Converts a type scale identifier into the appropriate `line-height` value in `rem`s, either for
/// every breakpoint or just a specific one.
/// @deprecated This function has been deprecated in favor of using the tokens directly
/// @group typography
/// @param {string} $level - The name of the value from the type scale (e.g. `alpha`)
/// @param {string} $breakpoint [false] - A specific breakpoint name
/// @return {map | number} Either a map of `rem` values or a specific value for the given breakpoint
/// @example scss
///   gds-line-height(beta) // (palm: 1.5rem, desk: 2.25rem)
///   gds-line-height(delta, palm) // 1.5rem
@function gds-line-height($level, $breakpoint: false) {
  $gds-line-heights: (
    beta:    (palm: $gds-line-height-l,    desk: $gds-line-height-xl),
    gamma:   (palm: $gds-line-height-m,    desk: $gds-line-height-l),
    delta:   (palm: $gds-line-height-s,    desk: $gds-line-height-m),
    base:    (palm: $gds-line-height-base, desk: $gds-line-height-base),
    milli:   (palm: $gds-line-height-xs,   desk: $gds-line-height-xs)
  );

  $line-heights: map-get($gds-line-heights, $level);

  @if $breakpoint and map-has-key($line-heights, $breakpoint) {
    @return map-get($line-heights, $breakpoint);
  } @else {
    @return $line-heights;
  }
}

/// Takes in a type scale identifier and outputs the appropriate `font-size` and `line-height`
/// values for both `palm` and `desk` breakpoints. Without a type scale identifier it will reset
/// `font-size` and `line-height` to their base (default) values.
/// @deprecated This mixin has been deprecated in favor of using standard text elements
/// @group typography
/// @param {string} $level [base] - The name of the value from the type scale (e.g. `alpha`)
/// @example scss
///   @include gds-font-size(beta);
///   // line-height: 3rem;
///   // font-size: 2rem;
///   // @media screen and (min-width: 48em) {
///   //   line-height: 4rem;
///   //   font-size: 3rem;
///   // }
@mixin gds-font-size($level: base) {
  $line-heights: gds-line-height($level);
  $font-sizes: gds-font-size($level);

  line-height: map-get($line-heights, palm);
  font-size: map-get($font-sizes, palm);

  @if map-get($font-sizes, desk) != map-get($font-sizes, palm) {
    @include gds-respond-to(legacy-desk) {
      line-height: map-get($line-heights, desk);
      font-size: map-get($font-sizes, desk);
    }
  }
}

/// Takes in a type scale identifier and outputs the correct `font-size` and `line-height` values.
/// Without a type scale identifier it will reset `font-size` and `line-height` to their base
/// (default) values. With an optional bold boolean it will call `gds-font-weight` with the type
/// scale level provided.
/// @group typography
/// @param {string} $level [base] - The name of the value from the type scale (e.g. `m`)
/// @param {boolean} $bold [false] - Whether the text should be bolded or not
/// @example scss
///   @include gds-font-size(m, true);
///   // line-height: 1.875rem;
///   // font-size: 1.5rem;
///   // font-weight: 600;
@mixin gds-typeset($level: base, $bold: false) {
  $typeset-map: (
    base: ($gds-line-height-base, $gds-font-size-base),
    xs: ($gds-line-height-xs, $gds-font-size-xs),
    s: ($gds-line-height-s, $gds-font-size-s),
    m: ($gds-line-height-m, $gds-font-size-m),
    l: ($gds-line-height-l, $gds-font-size-l),
    xl: ($gds-line-height-xl, $gds-font-size-xl)
  );

  line-height: nth(map-get($typeset-map, $level), 1);
  font-size: nth(map-get($typeset-map, $level), 2);

  @if $bold {
    @include gds-font-weight($level);
  }
}

/// Takes in a type scale identifier and outputs either semibold or bold as the `font-weight` with
/// the correct fallback font for bold.
/// @group typography
/// @param {string} $typeset-level [base] - The name of the value from the type scale (e.g. `m`)
/// @example scss
///   @include gds-font-weight(m);
///   // font-weight: 600;
///   @include gds-font-weight(l);
///   // font-family: "Arial Black", Arial, sans-serif;
///   // font-weight: 700;
///   // .wf-canadatypegibson-n7-active {
///   //   font-family: canada-type-gibson, "Arial Black", Arial, sans-serif;
///   // }
@mixin gds-font-weight($typeset-level) {
  $font-weight-map: (base: false, xs: false, s: false, m: false, l: true, xl: true);

  @if map-get($font-weight-map, $typeset-level) {
    font-family: $gds-font-family-bold-fallback;
    font-weight: $gds-font-weight-bold;

    // We don't have control over this class name
    // scss-lint:disable SelectorFormat
    .wf-canadatypegibson-n7-active & {
    // scss-lint:enable SelectorFormat
      font-family: $gds-font-family-bold;
    }
  } @else {
    font-weight: $gds-font-weight-semibold;
  }
}

/// Resets the font weight back to normal and resets fonts if the type scale level dictates it.
/// @group typography
/// @param {string} $typeset-level [base] - The name of the value from the type scale (e.g. `m`)
/// @param {string} $force [false] - Whether to do the font reset regardless of type scale level
/// @example scss
///   @include gds-font-weight-reset(m);
///   // font-weight: 400;
///   @include gds-font-weight-reset(l);
///   // font-weight: 400;
///   // font-family: Arial, sans-serif;
///   // .wf-canadatypegibson-n4-active {
///   //   font-family: canada-type-gibson, Arial, sans-serif;
///   // }
@mixin gds-font-weight-reset($typeset-level: base, $force: false) {
  $font-weight-map: (base: false, xs: false, s: false, m: false, l: true, xl: true);

  font-weight: $gds-font-weight-normal;

  @if map-get($font-weight-map, $typeset-level) or $force {
    font-family: $gds-font-family-fallback;

    // We don't have control over this class name
    // scss-lint:disable SelectorFormat
    .wf-canadatypegibson-n4-active & {
    // scss-lint:enable SelectorFormat
      font-family: $gds-font-family;
    }
  }
}

/// Creates a media query block with `screen` and a `max-width`.
/// @deprecated This function has been deprecated in favor of gds-respond-to
/// @group media
/// @param {number} $threshold [false] - The value for the `max-width` part of the query
/// @content The styles that go in the media query block
@mixin gds-max-width($threshold: false) {
  @if $threshold {
    @media only screen and (max-width: scut-em($threshold)) {
      @content;
    }
  } @else {
    @include gds-respond-to(legacy-palm) {
      @content;
    }
  }

}

/// Creates a media query block with `screen` and a `min-width`.
/// @deprecated This function has been deprecated in favor of gds-respond-to
/// @group media
/// @param {number} $threshold [false] - The value for the `min-width` part of the query
/// @content The styles that go in the media query block
@mixin gds-min-width($threshold: false) {
  @if $threshold {
    @media only screen and (min-width: scut-em($threshold)) {
      @content;
    }
  } @else {
    @include gds-respond-to(legacy-desk) {
      @content;
    }
  }
}

/// Creates a media query block with the given Gazelle media query token
/// @group media
/// @param {string} $media-query - The name of the media query to use (e.g. palm-only, lap-and-up)
/// @content The styles that go in the media query block
@mixin gds-respond-to($media-query) {
  $media-queries: (
    "palm-only":        $gds-media-query-palm-only,
    "lap-only":         $gds-media-query-lap-only,
    "lap-to-lap-wide":  $gds-media-query-lap-to-lap-wide,
    "lap-to-desk":      $gds-media-query-lap-to-desk,
    "lap-and-up":       $gds-media-query-lap-and-up,
    "lap-wide-only":    $gds-media-query-lap-wide-only,
    "lap-wide-to-desk": $gds-media-query-lap-wide-to-desk,
    "lap-wide-and-up":  $gds-media-query-lap-wide-and-up,
    "desk-only":        $gds-media-query-desk-only,
    "desk-and-up":      $gds-media-query-desk-and-up,
    "wall-only":        $gds-media-query-wall-only,
    "legacy-palm":      $gds-media-query-legacy-palm,
    "legacy-desk":      $gds-media-query-legacy-desk
  );

  @if map-has-key($media-queries, $media-query) == false {
    @error "'#{$media-query}' is not a valid media query.";
  }

  @media #{map-get($media-queries, $media-query)} {
    @content;
  }
}

@mixin _gds-form-control {
  line-height: gds-line-height(base, palm);
  border: $gds-border-width-control solid $gds-color-border-control;
  border-radius: 3px;
  background-color: $gds-color-background-control;
  padding: $gds-vertical-rhythm - scut-rem($gds-border-width-control);
  color: $gds-color-text-control;
  transition: border 400ms linear, background-color 400ms linear;

  &:focus,
  &:active {
    outline: 0;
    box-shadow: 0 0 1px 1px darken($gds-color-border-control, 10%);
  }
}

@mixin _gds-form-control-disabled {
  border-color: $gds-color-border-control;
  background-color: $gds-color-background-control-disabled;
  cursor: not-allowed;
  user-select: none;
  color: $gds-color-text-control-disabled;
}

@mixin _gds-form-control-invalid {
  color: $gds-color-text-error;
  border-color: $gds-color-border-error;

  &:focus,
  &:active {
    box-shadow: 0 0 1px 1px darken($gds-color-border-error, 5%);
  }
}

@mixin _gds-form-control-valid {
  border-color: $gds-color-border-success;

  &:focus,
  &:active {
    box-shadow: 0 0 1px 1px darken($gds-color-border-success, 5%);
  }
}

@mixin _gds-form-option($type, $container-radius) {
  span#{&} {
    display: inline-block;
  }

  label {
    display: inline-block;
    position: relative;
    padding-left: scut-rem(30px);

    &::before {
      @include scut-absolute(scut-rem(3px) n n scut-rem(6px));
      @include scut-size(scut-rem(18px));
      border: 1px solid $gds-color-border-control;
      border-radius: $container-radius;
      background-color: $gds-color-background-control;
      line-height: gds-line-height(base, palm);
      content: "";
    }
  }

  [type="#{$type}"] {
    position: absolute;
    opacity: 0;

    &:focus,
    &:active {
      + label::before {
        outline: 0;
        box-shadow: 0 0 1px 1px darken($gds-color-border-control, 10%);
      }
    }

    &:checked + label::after {
      content: "";
      @content;
    }
  }
}

@mixin _gds-form-option-disabled($type) {
  [type="#{$type}"]:disabled + label {
    cursor: not-allowed;
    user-select: none;

    &::before {
      background-color: $gds-color-background-control-disabled;
    }

    &::after {
      @content;
    }
  }
}

@mixin _gds-form-option-invalid($type) {
  & [type="#{$type}"] {
    + label {
      &::before {
        border-color: $gds-color-border-error;
      }

      &::after {
        @content;
      }
    }

    &:focus,
    &:active {
      + label::before {
        box-shadow: 0 0 1px 1px darken($gds-color-border-error, 5%);
      }
    }
  }
}

%gds-link {
  cursor: pointer;
  text-decoration: underline;
  color: $gds-color-text-link;

  &:hover,
  &:focus {
    text-decoration: none;
  }
}

%gds-link-inline {
  box-shadow: inset 0 -3px 0 $gds-color-blue-20;
  text-decoration: none;
  color: inherit;

  &:hover,
  &:focus {
    box-shadow: inset 0 -3px 0 $gds-color-blue-30;
  }
}

%gds-lede {
  @include gds-respond-to(legacy-desk) {
    @include gds-typeset(m);
  }
}


$gds-font-size-xs: 1rem;
$gds-font-size-s: 1.125rem;
$gds-font-size-m: 1.5rem;
$gds-font-size-l: 2.5rem;
$gds-font-size-xl: 4rem;
$gds-font-size-base: 1rem;
$gds-font-weight-normal: 300;
$gds-font-weight-semibold: 600;
$gds-font-weight-bold: 800;
$gds-line-height-xs: 1.5rem;
$gds-line-height-s: 1.5rem;
$gds-line-height-m: 1.875rem;
$gds-line-height-l: 2.5rem;
$gds-line-height-xl: 4rem;
$gds-line-height-base: 1.25rem;
$gds-font-family: "proxima-nova", "canada-type-gibson", system-ui, BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
 // Override variables
html,
body {
  @include gds-respond-to(legacy-palm) {
    overflow-x: hidden;
  }
}

html {
  background-color: $gds-color-background-default;
  color: $gds-color-text-default;
  font-family: $gds-font-family-fallback;

  // We don't have control over this class name
  // scss-lint:disable SelectorFormat
  &.wf-canadatypegibson-n4-active {
  // scss-lint:enable SelectorFormat
    font-family: $gds-font-family;
  }
}

body {
  line-height: $gds-line-height-base;
  font-size: $gds-font-size-base;
}

b,
strong {
  font-weight: $gds-font-weight-semibold;
}

a {
  @extend %gds-link;
}

////
/// Sass utilities for the Gazelle Design System
/// @author Jeremy McDuffie
////

/// Creates a button style with the given background color. By default, the text color will be
/// chosen automatically based on the brightness of the background. Note: The hover background color
/// is currently optional for backwards-compatibility but consider that usage to be deprecated and
/// update all of your code to pass in both colors.
/// @param {color} $background-color - The color of the button
/// @param {color} $color [false] - The color of the text
/// @param {color} $hover-background-color [false] - The color of the button on hover/focus
/// @example scss
///   @include gds-button-style(blue);
///   @include gds-button-style(chartreuse, red);
@mixin gds-button-style($background-color, $color: false, $hover-background-color: false) {
  background-color: $background-color;

  @if $color {
    color: $color;
  } @elseif brightness($background-color) < 65% {
    color: $gds-color-white;
  } @else {
    color: $gds-color-text-default;
  }

  &:hover,
  &:focus {
    @if $hover-background-color {
      background-color: $hover-background-color;
    } @else {
      // This is a false positive
      // scss-lint:disable VariableForProperty
      background-color: darken($background-color, 8%);
      // scss-lint:enable VariableForProperty
    }
  }
}

/// Creates a ghost button style with the given color. Ghost buttons have a colored
/// border matching the text color and a transparent background. Note: The hover color is currently
/// optional for backwards-compatibility but consider that usage to be deprecated and update all of
/// your code to pass in both colors.
/// @param {color} $color - The color of the button
/// @param {color} $hover-color [false] - The color of the button on hover/focus
/// @example scss
///   @include gds-ghost-button-style(green);
@mixin gds-ghost-button-style($color, $hover-color: false) {
  border-color: currentColor;
  background-color: transparent;
  color: $color;

  &:hover,
  &:focus {
    background-color: transparent;

    @if $hover-color {
      color: $hover-color;
    } @else {
      // This is a false positive
      // scss-lint:disable VariableForProperty
      color: darken($color, 8%);
      // scss-lint:enable VariableForProperty
    }
  }
}

/// Converts one or more numbers of rhythms into `rem`s. `0` is left alone along with any
/// non-numeric values, such as `n`.
/// @group rhythm
/// @param {list | number} $multipliers [1] - The number of rhythms, or a list of such numbers
/// @return {list | number} The transformed number (in `rem`s) or a list of such numbers
/// @example scss
///   gds-rhythm() // 1.5rem
///   gds-rhythm(4) // 6rem
///   gds-rhythm(1 n 2 0) // 1.5rem n 3rem 0
@function gds-rhythm($multipliers: 1) {
  $result: ();

  @each $multiplier in $multipliers {
    @if type-of($multiplier) == number and $multiplier != 0 {
      $result: append($result, $gds-vertical-rhythm * $multiplier);
    } @else {
      $result: append($result, $multiplier);
    }
  }

  @return $result;
}

/// Sets the `margin` properties in `rem`s based on a list of values in rhythms. The value `n` can
/// be used to prevent setting a `margin` for that side. Non-numbers are ignored (e.g. `auto`).
/// @group rhythm
/// @param {list} $values - 1-4 `margin` values in rhythms
/// @example scss
///   @include gds-rhythm-margin(1);
///   // margin: 1.5rem;
///   @include gds-rhythm-margin(0 auto 4);
///   // margin: 0 auto 6rem;
///   @include gds-rhythm-margin(1 n 2);
///   // margin-top: 1.5rem;
///   // margin-bottom: 3rem;
@mixin gds-rhythm-margin($values) {
  @include scut-margin(gds-rhythm($values));
}

/// Sets the `padding` properties in `rem`s based on a list of values in rhythms. The value `n` can
/// be used to prevent setting a `padding` for that side.
/// @group rhythm
/// @param {list} $values - 1-4 `padding` values in rhythms
/// @example scss
///   @include gds-rhythm-padding(1);
///   // padding: 1.5rem;
///   @include gds-rhythm-padding(1 n 2);
///   // padding-top: 1.5rem;
///   // padding-bottom: 3rem;
@mixin gds-rhythm-padding($values) {
  @include scut-padding(gds-rhythm($values));
}

/// Sets the `width` and `height` properties in `rem`s based on a list of values in rhythms.
/// @group rhythm
/// @param {list} $values - Either a single value to use for both `width` and `height` or a `width` value followed by a `height` value
/// @example scss
///   @include gds-rhythm-size(2);
///   // width: 3rem;
///   // height: 3rem;
///   @include gds-rhythm-size(1 3);
///   // width: 1.5rem;
///   // height: 4.5rem;
@mixin gds-rhythm-size($values) {
  @include scut-size(gds-rhythm($values));
}

/// Converts a type scale identifier into the appropriate `font-size` value in `rem`s, either for
/// every breakpoint or just a specific one.
/// @deprecated This function has been deprecated in favor of using the tokens directly
/// @group typography
/// @param {string} $level - The name of the value from the type scale (e.g. `alpha`)
/// @param {string} $breakpoint [false] - A specific breakpoint name
/// @return {map | number} Either a map of `rem` values or a specific value for the given breakpoint
/// @example scss
///   gds-font-size(beta) // (palm: 1.5rem, desk: 2.25rem)
///   gds-font-size(delta, palm) // 1.125rem
@function gds-font-size($level, $breakpoint: false) {
  $gds-font-sizes: (
    beta:    (palm: $gds-font-size-l,    desk: $gds-font-size-xl),
    gamma:   (palm: $gds-font-size-m,    desk: $gds-font-size-l),
    delta:   (palm: $gds-font-size-s,    desk: $gds-font-size-m),
    base:    (palm: $gds-font-size-base, desk: $gds-font-size-base),
    milli:   (palm: $gds-font-size-xs,   desk: $gds-font-size-xs)
  );

  $font-sizes: map-get($gds-font-sizes, $level);

  @if $breakpoint and map-has-key($font-sizes, $breakpoint) {
    @return map-get($font-sizes, $breakpoint);
  } @else {
    @return $font-sizes;
  }
}

/// Converts a type scale identifier into the appropriate `line-height` value in `rem`s, either for
/// every breakpoint or just a specific one.
/// @deprecated This function has been deprecated in favor of using the tokens directly
/// @group typography
/// @param {string} $level - The name of the value from the type scale (e.g. `alpha`)
/// @param {string} $breakpoint [false] - A specific breakpoint name
/// @return {map | number} Either a map of `rem` values or a specific value for the given breakpoint
/// @example scss
///   gds-line-height(beta) // (palm: 1.5rem, desk: 2.25rem)
///   gds-line-height(delta, palm) // 1.5rem
@function gds-line-height($level, $breakpoint: false) {
  $gds-line-heights: (
    beta:    (palm: $gds-line-height-l,    desk: $gds-line-height-xl),
    gamma:   (palm: $gds-line-height-m,    desk: $gds-line-height-l),
    delta:   (palm: $gds-line-height-s,    desk: $gds-line-height-m),
    base:    (palm: $gds-line-height-base, desk: $gds-line-height-base),
    milli:   (palm: $gds-line-height-xs,   desk: $gds-line-height-xs)
  );

  $line-heights: map-get($gds-line-heights, $level);

  @if $breakpoint and map-has-key($line-heights, $breakpoint) {
    @return map-get($line-heights, $breakpoint);
  } @else {
    @return $line-heights;
  }
}

/// Takes in a type scale identifier and outputs the appropriate `font-size` and `line-height`
/// values for both `palm` and `desk` breakpoints. Without a type scale identifier it will reset
/// `font-size` and `line-height` to their base (default) values.
/// @deprecated This mixin has been deprecated in favor of using standard text elements
/// @group typography
/// @param {string} $level [base] - The name of the value from the type scale (e.g. `alpha`)
/// @example scss
///   @include gds-font-size(beta);
///   // line-height: 3rem;
///   // font-size: 2rem;
///   // @media screen and (min-width: 48em) {
///   //   line-height: 4rem;
///   //   font-size: 3rem;
///   // }
@mixin gds-font-size($level: base) {
  $line-heights: gds-line-height($level);
  $font-sizes: gds-font-size($level);

  line-height: map-get($line-heights, palm);
  font-size: map-get($font-sizes, palm);

  @if map-get($font-sizes, desk) != map-get($font-sizes, palm) {
    @include gds-respond-to(legacy-desk) {
      line-height: map-get($line-heights, desk);
      font-size: map-get($font-sizes, desk);
    }
  }
}

/// Takes in a type scale identifier and outputs the correct `font-size` and `line-height` values.
/// Without a type scale identifier it will reset `font-size` and `line-height` to their base
/// (default) values. With an optional bold boolean it will call `gds-font-weight` with the type
/// scale level provided.
/// @group typography
/// @param {string} $level [base] - The name of the value from the type scale (e.g. `m`)
/// @param {boolean} $bold [false] - Whether the text should be bolded or not
/// @example scss
///   @include gds-font-size(m, true);
///   // line-height: 1.875rem;
///   // font-size: 1.5rem;
///   // font-weight: 600;
@mixin gds-typeset($level: base, $bold: false) {
  $typeset-map: (
    base: ($gds-line-height-base, $gds-font-size-base),
    xs: ($gds-line-height-xs, $gds-font-size-xs),
    s: ($gds-line-height-s, $gds-font-size-s),
    m: ($gds-line-height-m, $gds-font-size-m),
    l: ($gds-line-height-l, $gds-font-size-l),
    xl: ($gds-line-height-xl, $gds-font-size-xl)
  );

  line-height: nth(map-get($typeset-map, $level), 1);
  font-size: nth(map-get($typeset-map, $level), 2);

  @if $bold {
    @include gds-font-weight($level);
  }
}

/// Takes in a type scale identifier and outputs either semibold or bold as the `font-weight` with
/// the correct fallback font for bold.
/// @group typography
/// @param {string} $typeset-level [base] - The name of the value from the type scale (e.g. `m`)
/// @example scss
///   @include gds-font-weight(m);
///   // font-weight: 600;
///   @include gds-font-weight(l);
///   // font-family: "Arial Black", Arial, sans-serif;
///   // font-weight: 700;
///   // .wf-canadatypegibson-n7-active {
///   //   font-family: canada-type-gibson, "Arial Black", Arial, sans-serif;
///   // }
@mixin gds-font-weight($typeset-level) {
  $font-weight-map: (base: false, xs: false, s: false, m: false, l: true, xl: true);

  @if map-get($font-weight-map, $typeset-level) {
    font-family: $gds-font-family-bold-fallback;
    font-weight: $gds-font-weight-bold;

    // We don't have control over this class name
    // scss-lint:disable SelectorFormat
    .wf-canadatypegibson-n7-active & {
    // scss-lint:enable SelectorFormat
      font-family: $gds-font-family-bold;
    }
  } @else {
    font-weight: $gds-font-weight-semibold;
  }
}

/// Resets the font weight back to normal and resets fonts if the type scale level dictates it.
/// @group typography
/// @param {string} $typeset-level [base] - The name of the value from the type scale (e.g. `m`)
/// @param {string} $force [false] - Whether to do the font reset regardless of type scale level
/// @example scss
///   @include gds-font-weight-reset(m);
///   // font-weight: 400;
///   @include gds-font-weight-reset(l);
///   // font-weight: 400;
///   // font-family: Arial, sans-serif;
///   // .wf-canadatypegibson-n4-active {
///   //   font-family: canada-type-gibson, Arial, sans-serif;
///   // }
@mixin gds-font-weight-reset($typeset-level: base, $force: false) {
  $font-weight-map: (base: false, xs: false, s: false, m: false, l: true, xl: true);

  font-weight: $gds-font-weight-normal;

  @if map-get($font-weight-map, $typeset-level) or $force {
    font-family: $gds-font-family-fallback;

    // We don't have control over this class name
    // scss-lint:disable SelectorFormat
    .wf-canadatypegibson-n4-active & {
    // scss-lint:enable SelectorFormat
      font-family: $gds-font-family;
    }
  }
}

/// Creates a media query block with `screen` and a `max-width`.
/// @deprecated This function has been deprecated in favor of gds-respond-to
/// @group media
/// @param {number} $threshold [false] - The value for the `max-width` part of the query
/// @content The styles that go in the media query block
@mixin gds-max-width($threshold: false) {
  @if $threshold {
    @media only screen and (max-width: scut-em($threshold)) {
      @content;
    }
  } @else {
    @include gds-respond-to(legacy-palm) {
      @content;
    }
  }

}

/// Creates a media query block with `screen` and a `min-width`.
/// @deprecated This function has been deprecated in favor of gds-respond-to
/// @group media
/// @param {number} $threshold [false] - The value for the `min-width` part of the query
/// @content The styles that go in the media query block
@mixin gds-min-width($threshold: false) {
  @if $threshold {
    @media only screen and (min-width: scut-em($threshold)) {
      @content;
    }
  } @else {
    @include gds-respond-to(legacy-desk) {
      @content;
    }
  }
}

/// Creates a media query block with the given Gazelle media query token
/// @group media
/// @param {string} $media-query - The name of the media query to use (e.g. palm-only, lap-and-up)
/// @content The styles that go in the media query block
@mixin gds-respond-to($media-query) {
  $media-queries: (
    "palm-only":        $gds-media-query-palm-only,
    "lap-only":         $gds-media-query-lap-only,
    "lap-to-lap-wide":  $gds-media-query-lap-to-lap-wide,
    "lap-to-desk":      $gds-media-query-lap-to-desk,
    "lap-and-up":       $gds-media-query-lap-and-up,
    "lap-wide-only":    $gds-media-query-lap-wide-only,
    "lap-wide-to-desk": $gds-media-query-lap-wide-to-desk,
    "lap-wide-and-up":  $gds-media-query-lap-wide-and-up,
    "desk-only":        $gds-media-query-desk-only,
    "desk-and-up":      $gds-media-query-desk-and-up,
    "wall-only":        $gds-media-query-wall-only,
    "legacy-palm":      $gds-media-query-legacy-palm,
    "legacy-desk":      $gds-media-query-legacy-desk
  );

  @if map-has-key($media-queries, $media-query) == false {
    @error "'#{$media-query}' is not a valid media query.";
  }

  @media #{map-get($media-queries, $media-query)} {
    @content;
  }
}

.gds-Button {
  @include gds-button-style($gds-color-blue-50, $hover-background-color: $gds-color-blue-40);
  display: inline-block;
  transition: background-color 400ms cubic-bezier(0.19, 1, 0.22, 1),
              border-color     400ms cubic-bezier(0.19, 1, 0.22, 1),
              color            400ms cubic-bezier(0.19, 1, 0.22, 1);
  border: 2px solid transparent;
  border-radius: 3px;
  cursor: pointer;
  padding: scut-rem(10px) scut-rem(22px);
  text-align: center;
  text-decoration: none;
  text-rendering: geometricPrecision;
  font-weight: $gds-font-weight-semibold;
  -webkit-font-smoothing: antialiased;

  &[disabled],
  &.is-disabled,
  &[disabled]:hover,
  &.is-disabled:hover,
  &[disabled]:focus,
  &.is-disabled:focus {
    background-color: $gds-color-gray-30;
    cursor: default;
    color: $gds-color-gray-60;
  }

  &.is-disabled {
    pointer-events: none;
  }

  &--alternate {
    @include gds-button-style($gds-color-amber-50, $gds-color-white, $gds-color-amber-40);
  }

  &--ghost {
    @include gds-ghost-button-style($gds-color-blue-50, $gds-color-blue-40);
  }

  &--ghostAlternate {
    @include gds-ghost-button-style($gds-color-white, $gds-color-gray-10);
  }
}

.gds-Hero {
  position: relative;

  &--alternate {
    color: $gds-color-white;
  }

  &-container {
    @include gds-rhythm-padding(4 2);
    @include scut-center-block($gds-site-width);
    text-align: center;

    @include gds-respond-to(legacy-desk) {
      @include gds-rhythm-padding(8 4);
    }

    &--left {
      text-align: left;
    }

    &--right {
      text-align: right;
    }
  }

  &-logo {
    display: inline-block;
    margin-bottom: gds-rhythm();

    > img {
      display: block;
    }
  }

  &-subtitle {
    display: block;
    margin-top: gds-rhythm();
    color: inherit;
  }

  &-lede {
    @include scut-center-block($gds-line-length-limit);
    margin-top: gds-rhythm();
  }

  &-directCta {
    margin-top: gds-rhythm(3);
  }

  &-transitionalCta {
    margin-top: gds-rhythm();
  }

  &--alternate & {
    &-title,
    &-transitionalCta {
      color: inherit;
    }
  }

  &-container--left & {
    &-lede {
      margin-left: 0;
    }

    &-title,
    &-subtitle,
    &-lede {
      max-width: 75%;

      @include gds-respond-to(legacy-desk) {
        max-width: 55%;
      }
    }
  }

  &-container--right & {
    &-lede {
      margin-right: 0;
    }
  }
}

.gds-FeatureGroup {
  padding: gds-rhythm(2);

  @include gds-respond-to(legacy-desk) {
    padding: gds-rhythm(4);
  }

  &-title {
    @include scut-center-block($gds-site-width);
    margin-bottom: gds-rhythm(2);
    text-align: center;

    &--item {
      @include gds-rhythm-margin(1 0 0);
      max-width: 100%;
    }
  }

  &-list {
    @include scut-center-block($gds-site-width);
    @include scut-clearfix;
    @include scut-list-unstyled;

    @media only screen and (min-width: scut-em(876)) {
      display: flex;
      justify-content: center;
    }
  }

  &-feature {
    position: relative;
    margin-top: gds-rhythm(6);
    text-align: center;

    @media only screen and (min-width: scut-em(876)) {
      display: flex;
      flex: 1;
      flex-direction: column;
      align-items: center;
      float: left;
      margin-top: 0;

      &:first-child:nth-last-child(2),
      &:first-child:nth-last-child(2) ~ & {
        width: 47.5%;

        &::before {
          left: -5.5%;
        }
      }

      &:first-child:nth-last-child(3),
      &:first-child:nth-last-child(3) ~ & {
        width: 30%;

        &::before {
          left: -8.5%;
        }
      }

      &:first-child:nth-last-child(2) ~ &,
      &:first-child:nth-last-child(3) ~ & {
        margin-left: 5%;
      }

      &:first-child:nth-last-child(4),
      &:first-child:nth-last-child(4) ~ & {
        width: 22%;

        &::before {
          left: -10%;
        }
      }

      &:first-child:nth-last-child(4) ~ & {
        margin-left: 4%;
      }
    }

    &:first-child {
      margin-top: 0;
      padding-left: 0;

      &::before {
        display: none;
      }
    }

    &::before {
      @include scut-size(80% 2px);
      @include scut-absolute(gds-rhythm(-3) 10% n n);
      background: linear-gradient(to right,
                                  rgba($gds-color-gray-60, 0) 0%,
                                  rgba($gds-color-gray-60, 0.5) 50%,
                                  rgba($gds-color-gray-60, 0) 100%);
      content: "";

      @media only screen and (min-width: scut-em(876)) {
        @include scut-size(2px 80%);
        @include scut-absolute(10% auto n n);
        background: linear-gradient(to bottom,
                                    rgba($gds-color-gray-60, 0) 0%,
                                    rgba($gds-color-gray-60, 0.5) 50%,
                                    rgba($gds-color-gray-60, 0) 100%);
      }
    }
  }

  &--withoutDividers &-feature::before {
    background: none;
  }

  &-body {
    @include gds-rhythm-margin(1 0 2);
    @include scut-center-block(100%);
  }

  &-directCta {
    margin-top: auto;

    @include gds-respond-to(legacy-palm) {
      @include scut-center-block($gds-line-length-limit);
      display: block;
    }
  }

  &-transitionalCta {
    margin-top: gds-rhythm();
  }
}

.gds-Card {
  background-color: $gds-color-white;

  @include gds-respond-to(lap-and-up) {
    display: flex;
    flex-direction: column;
  }

  &-body {
    @include gds-rhythm-padding(2 1);
    max-width: $gds-line-length-limit;
  }

  &-imageLink {
    display: block;
    flex-shrink: 0;
  }

  &-image {
    @include scut-center-block;
    display: block;
  }

  &-title {
    margin-bottom: gds-rhythm();
  }

  &-text {
    max-width: $gds-line-length-limit;
  }

  &-footer {
    @include gds-rhythm-padding(n 1);
    margin-top: auto;
    border-top: 1px solid $gds-color-gray-30;
    text-align: center;
  }

  &-transitionalCta {
    @include gds-rhythm-padding(1 n);
    display: block;
  }
}

// This is a generated file. Do not edit it directly.
$gds-color-white: #fff;
$gds-color-black: #1f2426;
$gds-color-purple-10: #ffc7f2;
$gds-color-purple-20: #f59de2;
$gds-color-purple-30: #e07ecb;
$gds-color-purple-40: #d160b7;
$gds-color-purple-50: #b34fa0;
$gds-color-purple-60: #964286;
$gds-color-purple-70: #773569;
$gds-color-purple-80: #5b284f;
$gds-color-purple-90: #401c36;
$gds-color-violet-10: #d8c7ff;
$gds-color-violet-20: #b69df5;
$gds-color-violet-30: #9379e0;
$gds-color-violet-40: #7b62cc;
$gds-color-violet-50: #634fb3;
$gds-color-violet-60: #534296;
$gds-color-violet-70: #44367b;
$gds-color-violet-80: #352a60;
$gds-color-violet-90: #271f47;
$gds-color-blue-10: #ade9ff;
$gds-color-blue-20: #61d5ff;
$gds-color-blue-30: #00b2f6;
$gds-color-blue-40: #0091d9;
$gds-color-blue-50: #0073b9;
$gds-color-blue-60: #005b98;
$gds-color-blue-70: #047;
$gds-color-blue-80: #003561;
$gds-color-blue-90: #002342;
$gds-color-aqua-10: #adffff;
$gds-color-aqua-20: #75f8fc;
$gds-color-aqua-30: #3bebf5;
$gds-color-aqua-40: #00d6e6;
$gds-color-aqua-50: #00b6c7;
$gds-color-aqua-60: #0097a8;
$gds-color-aqua-70: #007384;
$gds-color-aqua-80: #005362;
$gds-color-aqua-90: #003540;
$gds-color-teal-10: #adfff4;
$gds-color-teal-20: #67f5e2;
$gds-color-teal-30: #2de0c8;
$gds-color-teal-40: #1cc8b4;
$gds-color-teal-50: #16a597;
$gds-color-teal-60: #0e8e7e;
$gds-color-teal-70: #077565;
$gds-color-teal-80: #035a4b;
$gds-color-teal-90: #004033;
$gds-color-green-10: #adffbe;
$gds-color-green-20: #83f295;
$gds-color-green-30: #5ae072;
$gds-color-green-40: #48ce65;
$gds-color-green-50: #35bd59;
$gds-color-green-60: #24a344;
$gds-color-green-70: #1b8533;
$gds-color-green-80: #106621;
$gds-color-green-90: #094212;
$gds-color-lime-10: #e5ffa8;
$gds-color-lime-20: #cdf383;
$gds-color-lime-30: #b3e65c;
$gds-color-lime-40: #a0d64a;
$gds-color-lime-50: #8ec738;
$gds-color-lime-60: #73ab29;
$gds-color-lime-70: #588f1a;
$gds-color-lime-80: #3b6610;
$gds-color-lime-90: #234208;
$gds-color-yellow-10: #fff6a8;
$gds-color-yellow-20: #ffec82;
$gds-color-yellow-30: #ffe45e;
$gds-color-yellow-40: #ffda47;
$gds-color-yellow-50: #fcd214;
$gds-color-yellow-60: #e3b409;
$gds-color-yellow-70: #b88907;
$gds-color-yellow-80: #805203;
$gds-color-yellow-90: #4d2d02;
$gds-color-amber-10: #ffe6a8;
$gds-color-amber-20: #ffd784;
$gds-color-amber-30: #ffc95e;
$gds-color-amber-40: #fdba40;
$gds-color-amber-50: #faab19;
$gds-color-amber-60: #e3900b;
$gds-color-amber-70: #b86b07;
$gds-color-amber-80: #804103;
$gds-color-amber-90: #4d2502;
$gds-color-orange-10: #ffd3ad;
$gds-color-orange-20: #feb881;
$gds-color-orange-30: #fa9f5a;
$gds-color-orange-40: #f58331;
$gds-color-orange-50: #e66f20;
$gds-color-orange-60: #c95a14;
$gds-color-orange-70: #a6400d;
$gds-color-orange-80: #7d2c09;
$gds-color-orange-90: #571c03;
$gds-color-red-10: #ffc4b8;
$gds-color-red-20: #ff9c8c;
$gds-color-red-30: #fa7c69;
$gds-color-red-40: #f26552;
$gds-color-red-50: #e64b40;
$gds-color-red-60: #cc392f;
$gds-color-red-70: #a62b24;
$gds-color-red-80: #821d1a;
$gds-color-red-90: #520d0b;
$gds-color-gray-10: #f5f7f8;
$gds-color-gray-20: #e8eced;
$gds-color-gray-30: #d5d9db;
$gds-color-gray-40: #b6bec2;
$gds-color-gray-50: #8e999e;
$gds-color-gray-60: #69757a;
$gds-color-gray-70: #495257;
$gds-color-gray-80: #333a3d;
$gds-color-gray-90: #1f2426;
$gds-color-twitter: #1da1f2;
$gds-color-linked-in: #0077b5;
$gds-color-facebook: #3b5998;
$gds-color-pinterest: #bd081c;
$gds-color-youtube: #f00;
$gds-color-google-plus: #dd4b39;
$gds-color-cerulean: #00b2f6;
$gds-color-lochmara: #0073b9;
$gds-color-regal-blue: #047;
$gds-color-celery: #8ec738;
$gds-color-mustard: #ffe45e;
$gds-color-sea-buckthorn: #faab19;
$gds-color-flame-pea: #e64b40;
$gds-color-athens-gray: #f5f7f8;
$gds-color-mischka: #d5d9db;
$gds-color-manatee: #69757a;
$gds-color-bright-gray: #333a3d;
$gds-font-family: canada-type-gibson, Arial, sans-serif;
$gds-font-family-bold: canada-type-gibson, "Arial Black", Arial, sans-serif;
$gds-font-family-fallback: Arial, sans-serif;
$gds-font-family-bold-fallback: "Arial Black", Arial, sans-serif;
$gds-font-size-xs: 1rem;
$gds-font-size-s: 1.125rem;
$gds-font-size-m: 1.5rem;
$gds-font-size-l: 2.25rem;
$gds-font-size-xl: 3rem;
$gds-font-size-base: 1.125rem;
$gds-font-weight-normal: 400;
$gds-font-weight-semibold: 600;
$gds-font-weight-bold: 700;
$gds-line-height-xs: 1.5rem;
$gds-line-height-s: 1.5rem;
$gds-line-height-m: 1.875rem;
$gds-line-height-l: 2.25rem;
$gds-line-height-xl: 3rem;
$gds-line-height-base: 1.5rem;
$gds-media-query-palm-only: "only screen and (max-width: 37.4375em)";
$gds-media-query-lap-only: "only screen and (min-width: 37.5em) and (max-width: 56.1875em)";
$gds-media-query-lap-to-lap-wide: "only screen and (min-width: 37.5em) and (max-width: 74.9375em)";
$gds-media-query-lap-to-desk: "only screen and (min-width: 37.5em) and (max-width: 112.4375em)";
$gds-media-query-lap-and-up: "only screen and (min-width: 37.5em)";
$gds-media-query-lap-wide-only: "only screen and (min-width: 56.25em) and (max-width: 74.9375em)";
$gds-media-query-lap-wide-to-desk: "only screen and (min-width: 56.25em) and (max-width: 112.4375em)";
$gds-media-query-lap-wide-and-up: "only screen and (min-width: 56.25em)";
$gds-media-query-desk-only: "only screen and (min-width: 75em) and (max-width: 112.4375em)";
$gds-media-query-desk-and-up: "only screen and (min-width: 75em)";
$gds-media-query-wall-only: "only screen and (min-width: 112.5em)";
$gds-media-query-legacy-palm: "only screen and (max-width: 47.9375em)";
$gds-media-query-legacy-desk: "only screen and (min-width: 48em)";

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}


@mixin backgroundChange {
  background: $gds-color-white;
  padding: 10px;
  border-radius: 4px;
  box-shadow: 1px 1px 15px #ccc;
}


.financial-peace {
  .wrap > div:not(.container):nth-child(2),
  .wrap > section {
    @include backgroundChange();
  }
}

html {
  background: $gds-color-gray-10;
  scroll-behavior: smooth;
  @include gds-typeset(xs);
}

body {
  background: $gds-color-gray-10;
  font-family: $gds-font-family;
}

tbody {
  border-top: none;
}

h1, h2, h4, h5, h6 {
  font-family: $gds-font-family-bold;
  font-weight: $gds-font-weight-semibold;
}

h1 {
  @include gds-typeset(l);
  @include gds-respond-to(lap-and-up) {
    @include gds-typeset(xl);
  }
}

h2 {
  font-size: 2rem;
  margin-bottom: 30px;
  padding-bottom: 14px;
}

h3 {
  @include gds-typeset(s);
  @include gds-respond-to(lap-and-up) {
    @include gds-typeset(m, true);
  }
}

.call-out {
  font-family: Wilderness;
  font-size: 7rem;
  font-weight: 400;
  line-height: 4.5rem;
  @include gds-respond-to(lap-wide-and-up) {
    font-size: 10rem;
    line-height: 6rem;
  }
}

.contained-row {
  align-items: flex-start;
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto;
  max-width: 1200px;
  overflow: hidden;
  padding: 0 10px;
  @include gds-respond-to(lap-and-up) {
    padding: 0 20px;
  }
}

.wrapper {
  background-color: $gds-color-white;
  border-radius: 7px;
  box-shadow: 1px 1px 11px $gds-color-gray-30;
  margin-bottom: 20px;
  margin-top: 5px;
  min-width: 270px;
  padding: 15px;
  width: 100%;
  @include gds-respond-to(lap-wide-and-up) {
    padding: 25px 40px;
  }
}

section.container {
  h2 {
    margin-bottom: 10px;
  }
  p {
    padding: 5px;
  }
}

.section-header{
  margin-top: 15px;
  text-align: center;
  @include gds-respond-to(lap-wide-and-up) {
    text-align: left;
  }
  .swash {
    @include gds-respond-to(lap-wide-and-up) {
      background-position-x: left;
    }
  }
}

%gds-link {
  text-decoration: none;
}

.gds-Button, 
.gds-Button--alternate {
  &:visited {
    color: $gds-color-white;
  }
  &:hover {
    color: $gds-color-white;
  }
  &:active {
    color: $gds-color-white;
  }
}

.admin-content {
  padding: 2rem;
}

.version-check .version-number {
  font-size: 1em;
}

.badge-wrapper.bullet .badge-category-bg {
  display: none;
}

/* Josh Young */
/* TODO:
  - add gazelle styles.
  - insure that the elements that are being hidden cannot be removed from the admin.
*/

.financial-peace .topic-category .badge-wrapper {
  border: none;
}

.financial-peace {
  &.navigation-categories {
    .nav.nav-pills {
      display: none;
    }
    button {
      border-radius: 4px;
      padding: 10px;
    }
  }

  .category-list {
    th.category, th.topics {
      display: none;
    }
  }

  .column {
    display: none;
  }

  .categories-and-latest div.column:last-child {
    display: none;
  }

  .column.categories {
    display: inline-block;
  }

  .topic-category {
    .discourse-tags {
      display: none;
      @include gds-respond-to(lap-wide-and-up) {
        display: block;
      }
    }
    .discourse-tag {
      padding: 8px 10px;
      font-size: 18px;
      background: $gds-color-gray-20;
    }
  }

  .topic-category .badge-wrapper {
    padding: 0;
    &.bullet {
      font-size: 18px;
      background: $gds-color-gray-30;
      &:after {
        content: '';
        display: block;
        position: relative;
        right: 6px;
        top: 2px;
        height: 0; 
        border-top: 7px solid transparent;
        border-bottom: 7px solid transparent;
        border-left: 9px solid $gds-color-gray-80;
        width: 0; 
      }
      .category-name {
        padding: 8px 12px;
      }
    }
  }

  .topic-category a {
    margin: 2px;
  }

  .category {
    padding: 1rem 0 1rem 0.5rem;
  }

  .category-list {
    td {
      padding: 2rem 0 2rem 1rem;
    }
    max-width: 230px;
    @media(min-width: 350px) {
      max-width: 100%;
    }
    th.category, th.topics {
      display: none;
    }
    td:first-of-type {
      padding-left: 1rem;
      padding-right: 0;
    }
    td.topics {
      @include gds-respond-to(palm-only) {
        display: none;
      }
    }
  }

  .category-list {
    .category-name {
      color: $gds-color-gray-60;
      font-weight: semibold;
      font-size: 24px;
      border: none;
    }
  }

  .category-list .topics .value {
    color: $gds-color-black;
    &:after {
      content: 'Topics';
      padding-left: 10px;
    }

    .wrap > .category-get-started {
      background:  $gds-color-white;
      border-radius: 6px;
      box-shadow: 1px 1px 15px #ccc;
    }

    /* TODO: There may be a way to do this in the admin console: */

    .badge-wrapper {
      border: 1px solid $gds-color-gray-50;
      border-radius: 2px;
      padding: 5px;
    }
  }
  .badge-wrapper.bullet span.badge-category {
    padding-left: 10px;
  }
}

.container {
  &.list-container {
    background: $gds-color-white;
    padding: none;
    @include gds-respond-to(lap-and-up) {
      padding: 3rem;
    }
  }
}

.create-topics-notice {
  display: none;
}

.list-controls {
  background: $gds-color-white;
  padding: 3rem 3rem 0;
  .btn {
    background: $gds-color-blue-40;
    color: $gds-color-white;
  }
}
.badge-wrapper.bullet{
  .category-name {
    border: 1px solid $gds-color-gray-50;
    border-radius: 2px;
    color: $gds-color-gray-60;
    padding: 0.5rem;
    text-decoration: none;
    font-weight: normal;
  }
}

td.num.views, td.num.activity{
  display: none;
}

th.views.num, th.activity.num {
  display: none;
}

#create-topic {
  background-color: $gds-color-blue-50;
  border-radius: 2px;
}

title.raw-link.raw-topic-link a{
  color: $gds-color-black;
  font-size: $gds-font-size-xs;
}


.newHere {
  margin-top: 25px;
  min-width: 290px;
  position: relative;
  border-radius: 7px;
}

.footer {
  text-align: center;
}

.footer__link {
  display: inline-block;
  padding: 1rem;
}

.homepage-footer {
  .gds-Hero-container{
    padding: 2rem;
  }
}

.homepage-wrapper,
.homepage-footer {
  display: none;
}

.navigation-topics .homepage-wrapper,
.navigation-topics .homepage-footer {
  display: block;
}

.Hero {
  &--welcome {
    margin-top: 4rem;
    min-width: 320px;
    position: relative;

    .inner {
      margin: 0 auto;
      max-width: 1200px;
      position: relative;
    } 
  }
}

a.tech-support {
  position: absolute;
  top: 30px;
  right: 10px;
  font-weight: normal;
  text-decoration: underline;
  color: $gds-color-white;
  &:visited {
    color: $gds-color-white;
  }
  &:hover {
    color: $gds-color-white;
  }
  &:active {
    color: $gds-color-white;
  }
}

.triangle-topleft {
  border-right: 150px solid transparent;
  border-top: 80px solid $gds-color-amber-50;
  height: 0;
  left: 0;
  position: absolute;
  top: 0;
  width: 0;
}

.triangle-bottomright {
  border-bottom: 80px solid $gds-color-amber-50;
  border-left: 150px solid transparent;
  bottom: 0;
  height: 0;
  position: absolute;
  right: 0;
  width: 0;
}

.gds-Hero-container {
  max-width: 500px;
  padding: 4rem 2rem 3rem;
  @include gds-respond-to(lap-wide-and-up) {
    padding: 4rem 3rem;
  }
}

.gds-Hero-title {
  font-size: 3rem;
  @include gds-respond-to(lap-wide-and-up) {
    font-size: 4rem;
  }
}

.gds-Hero-subtitle {
  font-weight: normal;
  margin: 1.5rem 0 ;
}

header .contents {
  .title {
    width: 150px;
    margin: 0 auto;
    float: none;
    @include gds-respond-to(lap-wide-and-up) {
      float: left;
      margin-left: 80px;
    }
  }

  .panel {
    position: absolute;
    top: 0;
    right: 0;
  }

}

.select-kit.dropdown-select-box .select-kit-row .texts .name {
  font-weight: $gds-font-weight-semibold;;
}
.nav-pills {
  li.active a {
    border-radius: 2px;
  }
}

.popular-wrapper {
  @include gds-respond-to(lap-wide-and-up) {
    width: 320px;
  }
}

.popular-header {
  h2 {
    padding-bottom: 14px;
    margin-bottom: 30px;
    font-size: 2rem;
    text-align: center;
    background-position: bottom center;
    background-repeat: no-repeat;
  }
}

.popular-items {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0 auto;
  max-width: 486px;
  min-width: 280px;

  .popular-item {
    align-items: center;
    background: $gds-color-gray-10;
    border: 1px solid $gds-color-gray-20;
    border-radius: 7px;
    display: flex;
    height: 125px;
    margin: 4px;
    padding: 0;
    text-align: center;
    width: 125px;
    @include gds-respond-to(lap-and-up) {
      padding: 12px;
    }

    &:hover {
      border: 1px solid $gds-color-amber-40;
      svg {
        transform: scale(1.1);
      }
    }
  }

  .popular-link {
    display: block;
    width: 100%;
    .popular-description {
      color: $gds-color-black;
      font-size: 1rem;
      margin-top: 16px;
    }
  }
}

/* Josh Young */
/* TODO: 
- Order CSS declarations alphabetically.
- Switch to gazelle:
  - colors
  - fonts 
  - breakpoints
- Add more data to populate and style other elements.
*/

/* Desktop - mobile first */
.user-profile-avatar {
  margin-top: 11px;
  margin-left: 5px;
}
.user-table .wrapper section {
  padding: 30px 20px;
  border-radius: 3px;
  box-shadow: 1px 1px 15px $gds-color-gray-10;
  background: $gds-color-white;
}

.user-main .about {
  background: $gds-color-white;
  border-radius: 3px;
  box-shadow: 1px 1px 15px $gds-color-gray-10;
}

.controls ul li:first-child a {
  background: $gds-color-blue-50;
  color: $gds-color-white;
  padding: 15px 10px !important;
  border-radius: 5px;
  margin-right: 10px;
  margin-top: 10px;
}
.controls ul li:last-child {
  display: none !important;
}
.stats-section {
  border-bottom: 1px solid $gds-color-gray-10;
}
.stats-title {
  text-transform: capitalize;
}
.stats-section {
  > * {
    padding: 0 10px;
  }
}
.stats-title {
  font-size: $gds-font-size-xs;
}
.top-sub-section {
  border-bottom: 1px solid $gds-color-gray-10;
  > * {
    padding: 0 10px;
  }
  h3 {
    font-size: $gds-font-size-xs;
    text-transform: capitalize;
  }
  li {
    border-left: none;
    padding-left: 0;
    padding-right: 0;
  }
}
.badges-section {
  > * {
    padding: 0 10px;
  }
}

.main-nav.nav-pills {
  li a {
    border-radius: 3px;
    margin: 2px;
    margin-right: 10px;
    background: $gds-color-gray-10;
  }
}

.user-table .wrapper section {
  &.user-navigation {
    box-shadow: none;
    ul.nav-stacked {
      background: $gds-color-gray-10;
      border-radius: 7px;
      padding: 20px;
      min-height: 250px;
      a {
        color: $gds-color-black;
        padding: 0;
        padding-bottom: 10px;
        font-size: 1rem;
      }
    }
  }
  &.user-right {
    box-shadow: none;
  }
}
.user-archive button {
  background: $gds-color-gray-10;
  width: 100%;
  border-radius: 3px;
}

.user-stream {
  .avatar-link {
    margin-right: 100px;
    float: right;
  }
  .time {
    margin-right: -100px;
  }
}
.stream-topic-details {
  .stream-topic-title a {
    color: $gds-color-black;
    font-weight: 900;
  }
}
.topic-list {
  td {
    padding: 40px 0;
  }
}

@media(min-width: 35em) {
  .top-section {
    display: flex;
    &.stats-section {
      display: block;
    }
    > * {
      float: none !important;
    }
  }
  .stats-section {
    margin-bottom: 45px;
  }
  .top-sub-section {
    margin: 0 10px 30px 10px;
  }
}

@media(min-width: 75em) {
  .top-sub-section {
    h3 {
      font-size: $gds-font-size-l;
    }
  }
  .stats-section {
    h3 {
      font-size: $gds-font-size-l;
    }
  }
  .badges-section {
    h3 {
      font-size: $gds-font-size-l;
    }
  }
}
/* end - Desktop mobile first */

.questions {
  &-wrapper {
    background-position: bottom;
    margin: 5px auto 20px;
    max-width: 1200px;
    padding: 0 10px;
    @include gds-respond-to(lap-wide-and-up) {
      padding: 0px 20px;
    }
  }

  .gds-Heading--secondary {
    color: $gds-color-white;
    line-height: 1.2;
    margin-bottom: 1rem;
    text-align: center;
  }
}

.gds-FeatureGroup {
  &-list{
    align-items: stretch;
    justify-content: center;
  }

  &-feature, 
  &-feature:first-child {
    background: $gds-color-white;
    border-radius: 7px;
    margin-top: 45px;
    max-width: 400px;
    padding-top: 1rem;
    width:100%;
    @include gds-respond-to(lap-wide-and-up) {
      margin-top: 25px;
    }
    .avatar {
      height: 80px;
      width: 80px;
    }
  }
}

.gds-Heading--secondary {
  font-size: 2rem;
}

.gds-Card-body {
  max-width: none;
}

.gds-Card-text {
  max-width: none;
  text-align: center;
  p {
    margin-top: 30px;
    font-size: 20px;
  }
  a {
    color: $gds-color-gray-50;
    font-size: 20px;
    font-weight: 200;
    padding-bottom: 15px;
    margin-bottom: 10px;
  }
}

.startHere {
  &-wrapper {
    flex: 1 1 auto;
    float: none;
    @include gds-respond-to(lap-wide-and-up) {
      flex: 2 2;
      justify-content: center;
      margin-right: 25px;
    }
  }
  
  &-header {
    h2 {
      font-size: 2rem;
      margin-bottom: 30px;
      padding-bottom: 15px;
    }
  }

  td {
    padding: 34px 0;
  }
  .d-icon-thumb-tack {
    display: none;
  }
  .editor {
    display: none;
  }
  .topic-list tr {
    border-top: 1px solid $gds-color-gray-30;
    border-bottom: none;
  }
  .poster-avatar{
    float: left;
    padding: 0 20px;
    @include gds-respond-to(lap-wide-and-up) {
      float: right;
    }
  }
}

.tags-page.financial-peace {
  .dropdown-toggle {
    display: none;
  }
  .list-controls {
    padding: 0;
  }

}
.tag-show-heading {
  i, .discourse-tag {
    display: none;
  }
  a:first-child {
    padding-bottom: 8px;
  }  
}

.tag-sort-options {
  display: none;
}

.tag-box {
  float: left;
  width: auto;
  margin-right: 20px;
  a.discourse-tag.simple {
    background: $gds-color-blue-50;
    color: $gds-color-white;
    display: block;
    padding: 10px;
    border-radius: 3px;
    &:visited {
      color: $gds-color-white;
    }
    &:hover {
      color: $gds-color-white;
    }
    &:active {
      color: $gds-color-white;
    }
  }
  .tag-count {
    display: none;
  }
}


.financial-peace {
  .top-nav-hamburger {
    position: absolute;
    top: 28px;
    left: 20px;
    width: 30px;
    height: 30px;
    z-index: 2;
    &:hover {
      color: $gds-color-blue-40;
      cursor: pointer;
    }
  }
  .fpu-global-nav {
    position: absolute;
    top: 72px; 
    left: 0;
    ul {
      box-shadow: inset 0px 1px 6px #ccc;
      margin: 0;
      padding: 70px 0;
      background: white;
      list-style-type: none;
      width: 240px;
      margin-left: -240px;
      &.open-top-nav {
        margin-left: 0;
      }
    }
    li {
      &.active {
        border-left: 6px solid $gds-color-amber-60;
        a {
          color: $gds-color-blue-40;
        }
      }
    }
    a {
      display: block;
      padding: 15px 0;
      padding-left: 40px;
      text-transform: uppercase;
      color: $gds-color-gray-40;
      &:hover {
        color: $gds-color-blue-40;
      }
    }
  }

  .d-header {
    position: fixed;
  }
  
  .d-header-icons {
    #toggle-hamburger-menu {
      display: none;
    }
    .icon img.avatar {
      width: 1.6rem;
      height: 1.4rem;
    }
  }

  .d-header-icons .unread-private-messages, .d-header-icons .ring {
    top: 4px;
    right: 6px;
  }

  .unread-private-messages {
    background: $gds-color-amber-50;
  }

  .d-header-icons .badge-notification {
    min-width: initial;
    border-radius: 50%;
  }
}

#topic-title h1 {
  padding-bottom: 2rem;
  a {
    color: $gds-color-gray-70;
    @include gds-respond-to(lap-wide-and-up) {
      font-size: 2rem;
    }
  }
}

.container {
  @include gds-respond-to(lap-wide-and-up) {
    padding: 0.4rem 2rem 0 2rem;
  }
}

.title-wrapper {
  .topic-status,
  .edit-topic {
    display: none
  }
}

.topic-meta-data .post-info a {
  color: $gds-color-gray-70;
  font-weight: 600;
  margin-right: 10px;
}

.category-site-feedback {
  background-color: $gds-color-white;
  margin-top: 2rem;
  padding: 15px;
}

button.reply {
  background-color: $gds-color-blue-30;
  border-radius: 2px;
  color: $gds-color-white;
}

.topic-meta-data a {
  color: $gds-color-black;
  padding-top: 2rem;
}

.names a {
  font-weight: $gds-font-weight-semibold;
  font-size: 18px;
}

.topic-post {
  background-color: $gds-color-gray-20;
  border: none;
  border-radius: 8px;
  margin-bottom: 1rem;
  padding-left: 1rem;
  padding-top: 1.5rem;
  max-width: 50rem;
}

.topic-avatar {
  padding-left: 1rem;
  padding-right: 1rem;
  border: none;
}
  .topics {
    border-top: 1px solid $gds-color-gray-30;
  }

  .topic-list {
    .category-name {
      padding: 0.5rem;
      font-weight: normal;
    }
  }

nav.post-controls {
  button, button.create {
    color: $gds-color-gray-70;
  }
}

.post-stream .topic-post .nav.post-controls .actions {
  float: right;
}

.container li.active a {
  border-radius: 2px;
}
.post-stream {
  > div:first-child {
    background-color: transparent;
    @include gds-respond-to(lap-wide-and-up) {
      border-top: 1px solid $gds-color-gray-30;
    }
    border-radius: unset;
  }
  > .topic-post:not(:first-child) {
    @include gds-respond-to(lap-wide-and-up) {
      margin-left: 106px;
    }
  }
  .topic-post:nth-child(2) {
    position: relative;
    &::after {
      border-bottom: 30px solid $gds-color-gray-20;
      border-left: 20px solid transparent;
      border-right: 20px solid transparent;
      content: '';
      display: block;
      height: 0; 
      left: 25px;
      position: absolute;
      top: -20px;
      width: 0; 
    }
  }
}

.post-stream {
  .topic-post:first-child {
    @include gds-respond-to(lap-wide-and-up) {
      .actions:first-child {
        margin-right: -120px;
      }
    }
  }
}

nav.post-controls {
  button, button.create {
    color: $gds-color-gray-70;
  }
}

.container li.active a {
  border-radius: 2px;
}

.avatar {
  height: 40px;
  width: 40px;
}

.topic-list .num.posts-map.posts a {
  color: $gds-color-gray-50;
  font-size: 1.1rem;
  font-weight: $gds-font-weight-semibold;
}

.topic-list td {
  padding: 2rem 0;
}

.actions {
  min-width: 220px;
}

#suggested-topics .suggested-topics-title {
  padding-bottom: 33px;
  color: $gds-color-gray-70;
}

.topic-map,
.topic-footer-main-buttons,
.topic-notifications-button,
.topic-timeline,
.suggested-topics-message,
a.badge-wrapper:nth-child(2),
td.num.views, 
td.num.activity,
th.views.num,
th.activity.num {
  display: none;
}

.topic-status-info,
.topic-body {
  border: none;
}

.topic-post-tags {
  a {
    color: $gds-color-gray-40;
    padding-right: 0.3rem;
    &:hover {
      color: $gds-color-blue-50;
    }
    &:active {
      color: $gds-color-blue-50;
    }
    &:visited {
      color: $gds-color-gray-40;
    } 
    &::after {
      content: ', ';
    }
  }
  :last-child {
    &::after {
      content: '';
    }
  }
}

.topic-list {
  thead {
    display: none;
  }
  .raw-topic-link {
    font-weight: $gds-font-weight-semibold;
    font-size: 1.1rem;
    a:link {
      color: $gds-color-black;
    }
    a:visited {
      color: $gds-color-gray-60;
    }
  }
  .posts-map.post {
    display: none;
  }
  .age.activity {
    display: none;
  }
  .views {
    display: none;
  }
  .posts {
    @include gds-respond-to(lap-wide-and-up) {
      width: 90px;
    }
  }
  a.posts-map.badge-posts.heatmap-::after {
    @include gds-respond-to(lap-wide-and-up) {
      content: " replies";
    }
  }
}

.topic-poster img {
  margin-top: -40px;
  background: $gds-color-white;
  padding: 4px;
  border-radius: 50px;
}

.show-more.has-topics {
  position: relative;
}

#list-area {
  margin-bottom: 20px;
}

.navigation-topics #main-outlet.wrap {
  max-width: 1200px;
  border-radius: 7px;
  box-shadow: 1px 1px 11px $gds-color-gray-30;
  padding: 0;
}

.container {
  background-color: $gds-color-white;
}

// This files is for any common.scss that requires variables stored in Discourse like image assets.
@font-face {
  font-family: Wilderness;
  src: url($wilderness) format('woff2');
}

.Hero--welcome {
  background: url($welcome_background);
  background-size: cover;
  background-position: bottom;
}

.newHere {
  background: url($new_here_background);
  background-size: cover;
}

.questions {
  background: url($questions_background);
  background-size: cover;
  border-radius: 7px;
}

.swash {
  background: url($headline_swash) no-repeat bottom center;
}

.startHere {
  tr.pinned td.last-post {
    background: url($pin_triangle) no-repeat top right; 
  }
}

.tag-show-heading a:first-child {
    background: url($headline_swash) no-repeat bottom center;
}

.top-nav-hamburger {
  background: url($icon_hamburger) no-repeat;
}
